<?xml version="1.0" encoding="utf-8"?><doc><assembly>
        <name>Remotion.Security.Interfaces</name>
    </assembly><members><member name="T:Remotion.Security.AccessType"><summary>Represents an access type enum value.</summary></member><member name="T:Remotion.Security.EnumWrapper"><summary>Represents an access type enum value.</summary><summary>Wraps an enum and exposes the enum information as string.</summary></member><member name="M:Remotion.Security.EnumWrapper.#ctor(System.Enum)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Security.EnumWrapper" /> class, setting the wrapper's name to a string of the format "enumValue|enumType".
            </summary><param name="enumValue">The enum value.</param></member><member name="M:Remotion.Security.EnumWrapper.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Security.EnumWrapper" /> class, setting the wrapper's name to the specified string.
            </summary><param name="name">The name to be set.</param></member><member name="M:Remotion.Security.EnumWrapper.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Security.EnumWrapper" /> class, setting the wrapper's <see cref="P:Remotion.Security.EnumWrapper.Name" /> to a string of the format 
            "valueName|typeName".
            </summary><param name="valueName">The enum value name to be set.</param><param name="typeName">The type name to be integrated into the name.</param></member><member name="T:Remotion.Security.IObjectSecurityAdapter"><summary>Defines an adapter between the security layer and the business object implementation.</summary></member><member name="T:Remotion.Security.ISecurityAdapter"><summary>
            Marker interface, used as type parameter for the <see cref="M:Remotion.BridgeInterfaces.IAdapterRegistryImplementation.SetAdapter(System.Type,Remotion.IAdapter)" /> and 
            <see cref="M:Remotion.BridgeInterfaces.IAdapterRegistryImplementation.GetAdapter``1" /> methods of <see cref="T:Remotion.AdapterRegistry" />.
            </summary></member><member name="M:Remotion.Security.IObjectSecurityAdapter.HasAccessOnGetAccessor(Remotion.Security.ISecurableObject,System.String)"><summary>Determines whether read access to a property of <paramref name="securableObject" /> is granted.</summary><param name="securableObject">The <see cref="T:Remotion.Security.ISecurableObject" /> whose permissions are checked.</param><param name="propertyName">The property for which the permissions are checked.</param></member><member name="M:Remotion.Security.IObjectSecurityAdapter.HasAccessOnSetAccessor(Remotion.Security.ISecurableObject,System.String)"><summary>Determines whether write access to a property of <paramref name="securableObject" /> is granted.</summary><param name="securableObject">The <see cref="T:Remotion.Security.ISecurableObject" /> whose permissions are checked.</param><param name="propertyName">The property for which the permissions are checked.</param></member><member name="T:Remotion.Security.IObjectSecurityStrategy"><summary>Encapsulates the security checks for the business object.</summary></member><member name="M:Remotion.Security.IObjectSecurityStrategy.HasAccess(Remotion.Security.ISecurityProvider,Remotion.Security.ISecurityPrincipal,Remotion.Security.AccessType[])"><summary>Determines whether the requested access is granted.</summary><param name="securityProvider">The <see cref="T:Remotion.Security.ISecurityProvider" /> used to determine the permissions.</param><param name="principal">The <see cref="T:Remotion.Security.ISecurityPrincipal" /> on whose behalf the permissions are evaluated.</param><param name="requiredAccessTypes">The access rights required for the access to be granted.</param></member><member name="T:Remotion.Security.IPrincipalProvider"><summary>Defines an interface for retrieving the current principal.</summary></member><member name="M:Remotion.Security.IPrincipalProvider.GetPrincipal"><summary>Gets the current user.</summary></member><member name="T:Remotion.Security.ISecurableObject"><summary>The base interface for all business objects that need security features.</summary></member><member name="M:Remotion.Security.ISecurableObject.GetSecurityStrategy"><summary>Gets the <see cref="T:Remotion.Security.IObjectSecurityStrategy" /> used by that business object.</summary></member><member name="M:Remotion.Security.ISecurableObject.GetSecurableType"><summary>Gets the <see cref="T:System.Type" /> representing the <see cref="T:Remotion.Security.ISecurableObject" /> in the security infrastructure.</summary></member><member name="T:Remotion.Security.ISecurityContext"><summary>
            The <see cref="T:Remotion.Security.ISecurityContext" /> interface collects all data required for evaluating the permissions a user has for an object.
            </summary></member><member name="M:Remotion.Security.ISecurityContext.GetState(System.String)"><summary>
            Retrieves the value assigned to the specified property of the <see cref="T:Remotion.Security.ISecurableObject" />.
            </summary><param name="propertyName">
            A <see cref="T:System.String" /> identifying a property of the <see cref="P:Remotion.Security.ISecurityContext.Class" /> that contains state relevant to evaluating 
            the permissions of the object. Must not be <see langword="null" /> or empty.
            </param></member><member name="M:Remotion.Security.ISecurityContext.ContainsState(System.String)"><summary>
            Tests whether the <paramref name="propertyName" /> represents a state property defined for the <see cref="P:Remotion.Security.ISecurityContext.Class" />.
            </summary><param name="propertyName">
            A <see cref="T:System.String" /> identifying a property of the <see cref="P:Remotion.Security.ISecurityContext.Class" /> that contains state relevant to evaluating 
            the permissions of the object. Must not be <see langword="null" /> or empty.
            </param></member><member name="M:Remotion.Security.ISecurityContext.GetNumberOfStates"><summary>
            Gets the total number of state properties defined for the <see cref="P:Remotion.Security.ISecurityContext.Class" />.
            </summary></member><member name="P:Remotion.Security.ISecurityContext.Class"><summary>
            Gets the type name of the <see cref="T:Remotion.Security.ISecurableObject" /> for which the permissions are to be evaluated by the <see cref="T:Remotion.Security.ISecurityStrategy" />.
            </summary></member><member name="P:Remotion.Security.ISecurityContext.Owner"><summary>
            Gets the name of the user that owns the <see cref="T:Remotion.Security.ISecurableObject" />.
            </summary></member><member name="P:Remotion.Security.ISecurityContext.OwnerGroup"><summary>
            Gets the name of the group that owns the <see cref="T:Remotion.Security.ISecurableObject" />.
            </summary></member><member name="P:Remotion.Security.ISecurityContext.OwnerTenant"><summary>
            Gets the name of the tenant that owns the <see cref="T:Remotion.Security.ISecurableObject" />.
            </summary></member><member name="P:Remotion.Security.ISecurityContext.AbstractRoles"><summary>
            Gets the list of abstract roles the current user has in regards to the <see cref="T:Remotion.Security.ISecurableObject" />.
            </summary></member><member name="P:Remotion.Security.ISecurityContext.IsStateless"><summary>
            Gets a flag describing whether the context contains any state properties.
            </summary></member><member name="T:Remotion.Security.ISecurityContextFactory"><summary>
            Objects implementing the <see cref="T:Remotion.Security.ISecurityContextFactory" /> interface are typically used by the <see cref="T:Remotion.Security.ISecurityStrategy" /> 
            to create an <see cref="T:Remotion.Security.ISecurityContext" /> for a buiness object.
            </summary></member><member name="M:Remotion.Security.ISecurityContextFactory.CreateSecurityContext"><summary>Gets the <see cref="T:Remotion.Security.ISecurityContext" /> for a business object.</summary></member><member name="T:Remotion.Security.ISecurityPrincipal"><summary>
            The <see cref="T:Remotion.Security.ISecurityPrincipal" /> interface represents a user, and optionally his active role and the user for whom he's acting as a substitue.
            </summary></member><member name="P:Remotion.Security.ISecurityPrincipal.User"><summary>
            Gets the name of the user. The <see cref="P:Remotion.Security.ISecurityPrincipal.User" /> must always be specified.
            </summary></member><member name="P:Remotion.Security.ISecurityPrincipal.Role"><summary>
            Gets the active role of the user. The <see cref="P:Remotion.Security.ISecurityPrincipal.Role" /> is optional.
            </summary></member><member name="P:Remotion.Security.ISecurityPrincipal.SubstitutedUser"><summary>
            Gets the name of the user that is being substitued. 
            The <see cref="P:Remotion.Security.ISecurityPrincipal.SubstitutedUser" /> must be specified if a <see cref="P:Remotion.Security.ISecurityPrincipal.SubstitutedRole" /> is specified as well.
            </summary></member><member name="P:Remotion.Security.ISecurityPrincipal.SubstitutedRole"><summary>
            Gets the role that is being substituted. The <see cref="P:Remotion.Security.ISecurityPrincipal.SubstitutedRole" /> is optional.
            </summary></member><member name="T:Remotion.Security.ISecurityPrincipalRole"><summary>
            The <see cref="T:Remotion.Security.ISecurityPrincipalRole" /> interface defines a role the user can be in.
            </summary></member><member name="P:Remotion.Security.ISecurityPrincipalRole.Group"><summary>
            The group the user is a member of. 
            </summary></member><member name="P:Remotion.Security.ISecurityPrincipalRole.Position"><summary>
            The position the user is a member of. Can be <see langword="null" />.
            </summary></member><member name="T:Remotion.Security.ISecurityProvider"><summary>Provides access to the permission management functionality.</summary></member><member name="M:Remotion.Security.ISecurityProvider.GetAccess(Remotion.Security.ISecurityContext,Remotion.Security.ISecurityPrincipal)"><summary>Determines permission for a user.</summary><param name="context">The <see cref="T:Remotion.Security.ISecurityContext" /> gouping all object-specific security information of the current permission check.</param><param name="principal">The <see cref="T:Remotion.Security.ISecurityPrincipal" /> on whose behalf the permissions are evaluated.</param></member><member name="T:Remotion.Security.ISecurityStrategy"><summary>Encapsulates the security checks.</summary></member><member name="M:Remotion.Security.ISecurityStrategy.HasAccess(Remotion.Security.ISecurityContextFactory,Remotion.Security.ISecurityProvider,Remotion.Security.ISecurityPrincipal,Remotion.Security.AccessType[])"><summary>Determines whether the requested access is granted.</summary><param name="factory">The <see cref="T:Remotion.Security.ISecurityContextFactory" /> to be used.</param><param name="securityProvider">The <see cref="T:Remotion.Security.ISecurityProvider" /> used to determine the permissions.</param><param name="principal">The <see cref="T:Remotion.Security.ISecurityPrincipal" /> on whose behalf the permissions are evaluated.</param><param name="requiredAccessTypes">The access rights required for the access to be granted.</param></member><member name="M:Remotion.Security.ISecurityStrategy.InvalidateLocalCache"><summary>Clears the cached access types of the <see cref="T:Remotion.Security.ISecurableObject" /> associated with this <see cref="T:Remotion.Security.ISecurityStrategy" />.</summary></member><member name="T:Remotion.Security.PermissionDeniedException"><summary>Exception thrown by the <see cref="T:Remotion.Security.SecurityClient" /> if access is denied.</summary></member></members></doc>
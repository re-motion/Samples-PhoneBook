<?xml version="1.0" encoding="utf-8"?><doc><assembly>
        <name>Remotion.Data.DomainObjects</name>
    </assembly><members><member name="T:Remotion.Data.DomainObjects.AutoRollbackBehavior"><summary>
            Provides an enumeration to configure <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope">ClientTransctionScope's</see> automatic rollback behavior.
            </summary></member><member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.None"><summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> should not perform any automatic operation.
            </summary></member><member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.Rollback"><summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> should automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback" /> at its end when
            its transaction holds uncommitted changed.
            </summary></member><member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.Discard"><summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> should automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard" /> at
            its end.
            </summary></member><member name="T:Remotion.Data.DomainObjects.BinaryPropertyAttribute"><summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.BinaryPropertyAttribute" /> to properties of type <see cref="T:System.Byte" /> array.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IMappingAttribute"><summary>
            <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IMappingAttribute" /> is a marker interface implemented by all attributes relevant to the mapping.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransaction"><summary>
            Represents an in-memory transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateRootTransaction"><summary>
            Creates a new root <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, specifically a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.RootClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateBindingTransaction"><summary>
            Creates a new root <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> that binds all <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances that are created in its context. A bound
            <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is always accessed in the context of its binding transaction, it never uses <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateEmptyTransactionOfSameType"><summary>Initializes a new instance of this transaction.</summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.DoEnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Enlists the given domain object in the current transaction.
            </summary><param name="domainObject">The domain object to be enlisted.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.IsEnlisted(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Determines whether the specified <paramref name="domainObject" /> is enlisted in this transaction.
            </summary><param name="domainObject">The domain object to be checked.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetEnlistedDomainObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> enlisted for the given <paramref name="objectID" /> in this transaction, or <see langword="null" /> if
            none such object exists.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for which to retrueve a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.PersistData(Remotion.Data.DomainObjects.DataManagement.DataContainerCollection)"><summary>
            Persists changed data in the couse of a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit" /> operation.
            </summary><param name="changedDataContainers">The data containers for any object that was changed in this transaction.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateNewObjectID(Remotion.Data.DomainObjects.Mapping.ClassDefinition)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for the given class definition.
            </summary><param name="classDefinition">The class definition to create a new <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadDataContainer(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads a data container from the underlying storage or the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction" />.
            </summary><param name="id">The id of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> to load.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadDataContainers(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.ObjectID},System.Boolean)"><summary>
            Loads a number of data containers from the underlying storage or the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction" />.
            </summary><param name="objectIDs">The ids of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> objects to load.</param><param name="throwOnNotFound">If true, this method should throw an <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectNotFoundException" /> if a data container cannot be found
            for an <see cref="T:Remotion.Data.DomainObjects.ObjectID" />. If false, the method should proceed as if the invalid ID hadn't been given.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadDataContainerForExistingObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Loads a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> from the datasource for an existing <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to load the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadRelatedDataContainer(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Loads the related <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point that should be evaluated.
            <paramref name="relationEndPointID" /> must refer to an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadRelatedDataContainers(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Loads all related <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />s of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point that should be evaluated.
            <paramref name="relationEndPointID" /> must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.HasCollectionEndPointDataChanged(Remotion.Data.DomainObjects.DomainObjectCollection,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Determines whether a specific collection end point's data has changed with the semantics defined by this transaction.
            </summary><param name="originalData">The end point to check for changes.</param><param name="currentData">The end point to check for changes.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"><summary>
            Discards this transaction (rendering it unusable) and, if this transaction is a subtransaction, returns control to the parent transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterDiscardingScope"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> for this transaction and enters it, making it the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope" /> for the current thread. When the scope is left, <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard" /> is executed. This will
            discard this transaction and make the parent transaction (if any) writeable again.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterScope(Remotion.Data.DomainObjects.AutoRollbackBehavior)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> for this transaction with the given automatic rollback behavior and enters it,
            making it the <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope" /> for the current thread.
            </summary><param name="rollbackBehavior">The automatic rollback behavior to be performed when the scope's <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave" />
            method is called.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterNonDiscardingScope"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> for this transaction and enters it, making it the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope" /> for the current thread. When the scope is left, this transaction is not discarded and the
            parent transaction (if any) is not made writeable.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Allows the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be used in the context of this transaction without needing to explicitly reload it there.
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> should be loadable into this transaction (i.e. it must be present in the underlying data store or the
            ParentTransaction), but this is not enforced until first access to the object.
            </summary><param name="domainObject">The object to be enlisted in this transaction.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistSameDomainObjects(Remotion.Data.DomainObjects.ClientTransaction,System.Boolean)"><summary>
            Calls <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" /> for each <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference currently enlisted with the given
            <paramref name="sourceTransaction" />.
            </summary><param name="sourceTransaction">The source transaction.</param><param name="copyCollectionEventHandlers">If true, <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.CopyCollectionEventHandlers(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)" /> will be used to copy any event handlers registered
            with <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> properties of the objects being enlisted. Events are only copied for objects
            that are newly enlisted by this method. Note that setting this parameter to true causes the enlisted objects to be loaded (if they exist);
            otherwise they will only be loaded on first access.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObjects(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Calls <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" /> for each <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference in the given collection.
            </summary><param name="domainObjects">The domain objects to enlist.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObjects(Remotion.Data.DomainObjects.DomainObject[])"><summary>
            Calls <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" /> for each <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference in the given collection.
            </summary><param name="domainObjects">The domain objects to enlist.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CopyCollectionEventHandlers(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Copies the event handlers defined on the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s collection properties from another transaction to this
            transaction.
            </summary><param name="domainObject">The domain object the event handlers of whose collection properties are to be copied.</param><param name="sourceTransaction">The transaction to copy the event handlers from.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CopyTransactionEventHandlers(Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Copies the event handlers defined on the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> to this transaction.
            </summary><param name="sourceTransaction">The transaction to copy the event handlers from.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateSubTransaction"><summary>
            Initializes a new subtransaction with this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> as its <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.HasChanged"><summary>
            Returns whether at least one <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in this <b>ClientTransaction</b> has been changed.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.Commit"><summary>
            Commits all changes within the <b>ClientTransaction</b> to the persistent datasources.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback"><summary>
            Performs a rollback of all changes within the <b>ClientTransaction</b>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjectForDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)"><summary>
            Retrieves a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be used with the given <paramref name="dataContainer" />.
            </summary><param name="dataContainer">The data container for which to retrieve a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is already loaded or attempts to load it from the datasource.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObject(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is already loaded or attempts to load it from the datasource.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param><param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are already deleted.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjects``1(Remotion.Data.DomainObjects.ObjectID[])"><summary>
            Gets a number of objects that are already loaded or attempts to load them from the data source. If an object cannot be found, an exception is
            thrown.
            </summary><param name="objectIDs">The IDs of the objects to be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.TryGetObjects``1(Remotion.Data.DomainObjects.ObjectID[])"><summary>
            Gets a number of objects that are already loaded or attempts to load them from the data source. If an object cannot be found, it is simply not
            included in the results list.
            </summary><param name="objectIDs">The IDs of the objects to be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjects``1(Remotion.Data.DomainObjects.ObjectID[],System.Boolean)"><summary>
            Gets a number of objects that are already loaded or attempts to load them from the data source.
            </summary><param name="objectIDs">The IDs of the objects to be retrieved.</param><param name="throwOnNotFound">Specifies whether an <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectNotFoundException" /> is raised (and encapsulated in a
            <see cref="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException" />) when an object cannot be found in the data source. If this parameter is set to false, such objects are
            ignored.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.HasRelationChanged(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Evaluates if any relations of the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> have changed since instantiation, loading, commit or rollback.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to evaluate. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Gets the related object of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetOriginalRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Gets the original related object of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> at the point of instantiation, loading, commit or rollback.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetRelatedObjects(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Gets the related objects of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetOriginalRelatedObjects(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Gets the original related objects of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> at the point of instantiation, loading, commit or rollback.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.SetRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Sets a relation between two relationEndPoints.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> referring the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoint" /> that should relate to <paramref name="newRelatedObject" />. Must not be <see langword="null" />.</param><param name="newRelatedObject">The new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be related; <see langword="null" /> indicates that no object should be referenced.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.Delete(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Deletes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to delete. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads an object from the datasource.
            </summary><param name="id">An <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object indicating which <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to load. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Loads the related <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point that should be evaluated.
            <paramref name="relationEndPointID" /> must refer to an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadRelatedObjects(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Loads all related <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point that should be evaluated.
            <paramref name="relationEndPointID" /> must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetDataContainer(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for a given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the context of this transaction, loading
            it from the data source if necessary.
            </summary><param name="domainObject">A <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference indicating the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />
            to retrieve. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.MergeLoadedDomainObjects(Remotion.Data.DomainObjects.DataManagement.DataContainerCollection,System.Type,System.Type,Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> with the specified <paramref name="collectionType" />, registers the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />s with this <b>ClientTransaction</b>, discards already loaded <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />s, raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Loaded" /> event and optionally registers the relation with the specified <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="dataContainers">The newly loaded <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />s.</param><param name="collectionType">The <see cref="T:System.Type" /> of the new collection that should be instantiated.</param><param name="requiredItemType">The permitted <see cref="T:System.Type" /> of an item in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. If specified only this type or derived types can be added to the <b>DomainObjectCollection</b>.</param><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> that should be evaluated.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.SetClientTransaction(Remotion.Data.DomainObjects.DataManagement.DataContainer)"><summary>
            Sets the ClientTransaction property of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />
            </summary><param name="dataContainer">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> that should be set to the <b>ClientTransaction</b>. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnLoaded(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Loaded" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnCommitting(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Committing" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnCommitted(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Committed" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnRollingBack(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.RollingBack" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnRolledBack(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.RolledBack" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.Current"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> currently associated with this thread, or <see langword="null" /> if no such transaction exists.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated"><summary>
            Occurs when the <b>ClientTransaction</b> has created a subtransaction.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.Loaded"><summary>
            Occurs after the <b>ClientTransaction</b> has loaded a new object.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.Committing"><summary>
            Occurs immediately before the <b>ClientTransaction</b> performs a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit" /> operation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.Committed"><summary>
            Occurs immediately after the <b>ClientTransaction</b> has successfully performed a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit" /> operation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.RollingBack"><summary>
            Occurs immediately before the <b>ClientTransaction</b> performs a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback" /> operation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.RolledBack"><summary>
            Occurs immediately after the <b>ClientTransaction</b> has successfully performed a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback" /> operation.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction"><summary>
            Gets the parent transaction for this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.RootTransaction"><summary>
            Gets the root transaction of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, i.e. the top-level parent transaction in a row of subtransactions.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.EnlistedDomainObjects"><summary>
            Gets all domain objects enlisted in this transaction.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.EnlistedDomainObjectCount"><summary>
            Gets the number of domain objects enlisted in this transaction.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager" /> of the <b>ClientTransaction</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.IsReadOnly"><summary>
            Indicates whether this transaction is set read-only.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.IsDiscarded"><summary>
            Returns whether this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> has been discarded. A transaction is discarded when its <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard" /> or
            <see cref="M:Remotion.Data.ITransaction.Release" /> methods are called or when it has been used in a discarding scope.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.Extensions"><summary>
            Gets the collection of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" />s of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> hierarchy.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.TransactionEventSink"><summary>
            Gets the transaction event sink for this transaction.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.DataManager"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.DataManager" /> of the <b>ClientTransaction</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.ApplicationData"><summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2" /> to store application specific objects 
            within the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> hierarchy.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection"><summary>
            A collection of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" />s.
            </summary></member><member name="T:Remotion.Data.DomainObjects.CommonCollection"><summary>
            Base class for all collections of Remotion.Data.DomainObjects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.#ctor"><summary>
            Initializes a new <b>CommonCollection</b>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.GetEnumerator"><summary>
            Returns an enumerator that can iterate through the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the items of the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> to an Array, starting at a particular Array index.
            </summary><param name="array">The one-dimensional array that is the destination of the items copied from <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />. The array must have zero-based indexing. Must not be <see langword="null" />.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseGetObject(System.Int32)"><summary>
            Returns the object with a given index from the collection 
            </summary><param name="index">The index of the object to return.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseGetObject(System.Object)"><summary>
            Returns the object with a given key from the collection.
            </summary><param name="key">The key of the object to return. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseContainsKey(System.Object)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> contains a specific key.
            </summary><param name="key">The key to locate in the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseContains(System.Object,System.Object)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> contains a specified value for a key.
            </summary><param name="key">The key to located in the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />. Must not be <see langword="null" />.</param><param name="value">The object that is expected as value for the specified key.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseAdd(System.Object,System.Object)"><summary>
            Adds an item with the specified key and value.
            </summary><param name="key">A key of the item to add. The key must not be <see langword="null" />. Must not be <see langword="null" />.</param><param name="value">The value of the item to add. The value must not be <see langword="null" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseRemove(System.Object)"><summary>
            Removes the item with the specified key.
            </summary><param name="key">The key of the item to remove. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseClear"><summary>
            Removes all objects from the collection.
            </summary></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseIndexOfKey(System.Object)"><summary>
            Returns the zero-based index of the item with a given key in the collection.
            </summary><param name="key">The <paramref name="key" /> to locate in the collection.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseInsert(System.Int32,System.Object,System.Object)"><summary>
            Inserts an item into the collection at the specified index.
            </summary><param name="index">The zero-based <paramref name="index" /> at which the item should be inserted.</param><param name="key">The key of the item to insert. Must not be <see langword="null" />.</param><param name="value">The <paramref name="value" /> of the item to add. The <paramref name="value" /> can be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.CheckIndexForInsert(System.String,System.Int32)"><summary>
            Checks the <paramref name="index" /> for an insert operation and throws an exception if it is invalid.
            </summary><param name="argumentName">The <paramref name="argumentName" /> for throwing the exception.</param><param name="index">The <paramref name="index" /> to check.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.CheckIndexForIndexer(System.String,System.Int32)"><summary>
            Checks the <paramref name="index" /> for access via the indexer and throws an exception if it is invalid.
            </summary><param name="argumentName">The <paramref name="argumentName" /> for throwing the exception.</param><param name="index">The <paramref name="index" /> to check.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.SetIsReadOnly(System.Boolean)"><summary>
            Sets the <see cref="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly" /> property of the collection.
            </summary><param name="isReadOnly">The new value for the <see cref="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly" /> property of the collection.</param></member><member name="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly"><summary>
            Gets a value indicating whether the collection is read-only.
            </summary></member><member name="P:Remotion.Data.DomainObjects.CommonCollection.IsSynchronized"><summary>
            Gets a value indicating whether access to the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> is synchronized (thread-safe).
            </summary></member><member name="P:Remotion.Data.DomainObjects.CommonCollection.Count"><summary>
            Gets the number of items contained in the collection.
            </summary></member><member name="P:Remotion.Data.DomainObjects.CommonCollection.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IClientTransactionExtension"><summary>
            Interface for extending the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> by observing events within the DomainObjects framework.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionCreating(Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            This method is invoked when a subtransaction of <paramref name="parentClientTransaction" /> is about to be created.
            </summary><param name="parentClientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionCreated(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            This method is invoked when a subtransaction of <paramref name="parentClientTransaction" /> has been created.
            </summary><param name="parentClientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="subTransaction">The subtransaction created by <paramref name="parentClientTransaction" />.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.NewObjectCreating(Remotion.Data.DomainObjects.ClientTransaction,System.Type)"><summary>
            This method is invoked when a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is created, but not registered yet. 
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="type">The <see cref="T:System.Type" /> of the new <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectLoading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID)"><summary>
            This method is invoked when a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is about to be loaded, after its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been created
            but before the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> is associated with the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be loaded.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            This method is invoked when one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s were loaded. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="loadedDomainObjects">A collection of all <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that were loaded.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectDeleting(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)"><summary>
            This method is invoked, before a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is deleted. 
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be deleted.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectDeleted(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)"><summary>
            This method is invoked, after a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> was deleted. 
            It indicates the success of the operation. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">
              The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that was deleted. This object might already be discarded.<br />
              For more information why and when an object is discarded see <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectDiscardedException" />.
            </param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked, before a value of <paramref name="dataContainer" /> is read. 
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> holding the value that is being read.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </param><param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object holding the value that is being read.</param><param name="valueAccess">A value indicating whether the current or the original value is being accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked when a value of <paramref name="dataContainer" /> was read. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> holding the value that was read.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </param><param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object holding the value that was read.</param><param name="value">The value that was read.</param><param name="valueAccess">A value indicating whether the current or the original value was accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)"><summary>
            This method is invoked before a value of <paramref name="dataContainer" /> is changed.
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> holding the <paramref name="propertyValue" /> that is being changed.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </param><param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object holding the value that is being changed.</param><param name="oldValue">The value of the property it currently has.</param><param name="newValue">The new value to be assigned to the property.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)"><summary>
            This method is invoked after a value of <paramref name="dataContainer" /> was changed.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> holding the <paramref name="propertyValue" /> that was changed.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </param><param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object holding the value that was changed.</param><param name="oldValue">The old value of the property it had before.</param><param name="newValue">The value that was assigned to the property.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,System.String,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked, before a relation property is being read. 
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property is being read.</param><param name="propertyName">The name of the relation property being read.</param><param name="valueAccess">A value indicating whether the current or the original value is being accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,System.String,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked when a relation property with cardinality <see cref="F:Remotion.Data.DomainObjects.Mapping.CardinalityType.One" /> was read. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property was read.</param><param name="propertyName">The name of the relation property that was read.</param><param name="relatedObject">The related <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of the relation property.</param><param name="valueAccess">A value indicating whether the current or the original value was accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,System.String,Remotion.Data.DomainObjects.DomainObjectCollection,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked when a relation property with cardinality <see cref="F:Remotion.Data.DomainObjects.Mapping.CardinalityType.Many" /> was read. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property was read.</param><param name="propertyName">The name of the relation property that was read.</param><param name="relatedObjects">
              A read-only <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> containing the related <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s of the relation property.
            </param><param name="valueAccess">A value indicating whether the current or the original value was accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,System.String,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"><summary>
            This method is invoked before a relation is changed.
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property is being changed.</param><param name="propertyName">The name of the relation property.</param><param name="oldRelatedObject">The current related object.</param><param name="newRelatedObject">The new related object to be assigned.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,System.String)"><summary>
            This method is invoked after a relation was changed.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property was changed.</param><param name="propertyName">The name of the relation property.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.FilterQueryResult``1(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.Queries.QueryResult{``0})"><summary>
            This method is invoked after a collection query was executed by <see cref="M:Remotion.Data.DomainObjects.Queries.RootQueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)" />.
            The <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> may change the result at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="queryResult">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1" /> representing the objects returned by the query. This object should be returned
            if the query result should not be changed. Access <see cref="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Query" /> to inspect the query being executed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committing(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            This method is invoked before a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is committed.
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="changedDomainObjects">A read-only <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are being committed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committed(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            This method is invoked after a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> was executed.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="changedDomainObjects">A read-only <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are being committed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RollingBack(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            This method is invoked before a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is rolled back.
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="changedDomainObjects">A read-only <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are being rolled back.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RolledBack(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            This method is invoked after a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> was rolled back.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="changedDomainObjects">A read-only <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are being rolled back.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Add(System.String,Remotion.Data.DomainObjects.IClientTransactionExtension)"><summary>
            Adds an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> to the collection.
            </summary><param name="extensionName">A name for the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param><param name="clientTransactionExtension">The extension to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Remove(System.String)"><summary>
            Removes an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> from the collection.
            </summary><param name="extensionName">The name of the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.IndexOf(System.String)"><summary>
            Gets the index of an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> with a given <paramref name="extensionName" />.
            </summary><param name="extensionName">The name of the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Insert(System.Int32,System.String,Remotion.Data.DomainObjects.IClientTransactionExtension)"><summary>
            Inserts an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> intto the collection at a specified index.
            </summary><param name="extensionName">A name for the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param><param name="clientTransactionExtension">The extension to insert. Must not be <see langword="null" />.</param><param name="index">The index where the extension should be inserted.</param></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Item(System.String)"><summary>
            Gets an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> by the extension name.
            </summary><param name="extensionName">The name of the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> of a given <paramref name="index" />.
            </summary><param name="index">The index of the extension to be retrieved.</param></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionFactory"><summary>The <see cref="T:Remotion.Data.DomainObjects.ClientTransactionFactory" /> is the default implementation of the <see cref="T:Remotion.Data.ITransactionFactory" /> interface.</summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionFactory.CreateRootTransaction"><summary>
            Creates a new root transaction instance. This instance is not yet managed by a scope.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionScope"><summary>
            Manages a thread's <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction" /> in a scoped way. Optionally, it can also automatically roll back a transaction at the end
            of the scope.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.ResetActiveScope"><summary>
            Resets the active scope to <see langword="null" />, causing the previously active scopes to be removed even if they haven't been left.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.EnterNullScope"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> with an empty (<see langword="null" />) <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ScopedTransaction" /> and makes
            it the current thread's <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.#ctor(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.AutoRollbackBehavior)"><summary>
            Associates a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> with the current thread, specifying the scope's automatic rollback behavior.
            </summary><param name="scopedCurrentTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> object used as the current transaction until the scope is left.</param><param name="autoRollbackBehavior">The automatic rollback behavior to be exhibited by this scope.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"><summary>
            Resets <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction" /> to the value it had before this scope was instantiated and performs the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior" />. This method is ignored when executed more than once.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Commit"><summary>
            Commits the transaction scoped by this object. This is equivalent to <c>ScopedTransaction.Commt()</c>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Rollback"><summary>
            Performs a rollback on the transaction scoped by this object. This is equivalent to <c>ScopedTransaction.Rollback()</c>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.HasCurrentTransaction"><summary>
            Gets a value indicating if a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is currently set as <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction" />. 
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> associated with the current thread. 
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"><summary>
            Retrieves the active <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> for the current thread.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior"><summary>
            Gets or sets a value indicating whether this scope will automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback" /> on a transaction
            with uncommitted changed objects when the scope's <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave" /> method is invoked.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.ScopedTransaction"><summary>
            Gets the transaction this scope was created for.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.Remotion#Data#ITransactionScope#ScopedTransaction"><summary>
            Gets the transaction managed by this scope.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.Remotion#Data#ITransactionScope#IsActiveScope"><summary>
            Gets a flag that describes whether this is the active scope.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoEnlistDomainObjects"><summary>
            Gets or sets a value indicating whether <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances are automatically enlisted in the current transaction within
            this scope.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationBase"><summary>
            Represents the common information all configuration classes provide.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ConfigurationBase.#ctor(Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader)"><summary>
            Initializes a new instance of the <b>ConfigurationBase</b> class from the specified <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader" />.
            </summary><param name="loader">The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader" /> to be used for reading the configuration. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.ConfigurationBase.ResolveTypes"><summary>
            Gets a flag whether type names in the configuration file should be resolved to their corresponding .NET <see cref="T:System.Type" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationException"><summary>
            BaseClass for exceptions that are related to the configuraton of the persistence framework.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectException"><summary>
            BaseClass for all exceptions of the persistence framework.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute"><summary>
            Declares a relation as bidirectional. Use <see cref="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey" /> to indicate the the foreign key side in a one-to-one relation
            and the <see cref="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.SortExpression" /> to specify the <b>Order By</b>-clause.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute"><summary>
            Declares a relation as bidirectional.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute" /> class with the name of the oppsite property.
            </summary><param name="oppositeProperty">The name of the opposite property. Must not be <see langword="null" /> or empty.</param></member><member name="M:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute" /> class with the name of the oppsite property
            and the <see cref="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey" /> value.
            </summary><param name="oppositeProperty">The name of the opposite property. Must not be <see langword="null" /> or empty.</param></member><member name="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey"><summary>Gets or sets a flag that indicates the foreign key side in a one-to-one relation.</summary></member><member name="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.SortExpression"><summary>
            Gets or sets the <b>Order By</b>-clause of the select statement used to retrieve the collection side of a one-to-many-relation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DBColumnAttribute"><summary>Overrides the name used as the column name in the <b>RDBMS</b>.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute" /> interface is used as a storage provider indifferent marker interface for more 
            conrete attributes such as the <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute.Identifier"><summary>
            Gets the <see cref="T:System.String" /> used as the identifier.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DBColumnAttribute.#ctor(System.String)"><summary>Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute" /> class.</summary><param name="name">The name. Must not be <see langword="null" /> or empty.</param></member><member name="P:Remotion.Data.DomainObjects.DBColumnAttribute.Name"><summary>
            Gets the column name defined by this <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DBStorageGroupAttribute"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DBStorageGroupAttribute" /> is the standard <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute" /> for types persisted into a database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.StorageGroupAttribute"><summary>The <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute" /> is the base class for defining storage groups in the domain layer.</summary></member><member name="T:Remotion.Data.DomainObjects.DBTableAttribute"><summary>
            Use the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" /> to define the distribution of the types within a persistence hierarchy into one or more database tables.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DBTableAttribute.#ctor"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" /> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DBTableAttribute.#ctor(System.String)"><summary>Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" /> class with a custom table name.</summary><param name="name">The name of the table. Must not be <see langword="null" /> or empty.</param></member><member name="P:Remotion.Data.DomainObjects.DBTableAttribute.Name"><summary>
            Gets the table name defined by this <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObject"><summary>
            Base class for all objects that are persisted by the framework.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"><summary>
            Represents the context of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is associated with a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.MarkAsChanged"><summary>
            Marks the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> as changed. If the object's previous <see cref="P:Remotion.Data.DomainObjects.DomainObject.State" /> was <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged" />, it
            will be <see cref="F:Remotion.Data.DomainObjects.StateType.Changed" /> after this method has been called.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.CanBeUsedInTransaction"><summary>
            Determines whether this instance can be used in the associated <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.State"><summary>
            Gets the current state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the associated <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.IsDiscarded"><summary>
            Gets a value indicating the discarded status of the object in the associated <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.Timestamp"><summary>
            Gets the timestamp used for optimistic locking when the object is committed to the database.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"><summary>
            Returns a new instance of a concrete domain object for the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The object is constructed
            using the default constructor in the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1(Remotion.Reflection.ParamList)"><summary>
            Returns a new instance of a concrete domain object for the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The object is constructed
            using the supplied constructor arguments in the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary><param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList" /> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)" /> methods.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is already loaded or attempts to load it from the datasource.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is already loaded or attempts to load it from the datasource.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param><param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are already deleted.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.#ctor"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> class in the process of deserialization.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> coming from the .NET serialization infrastructure.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> coming from the .NET serialization infrastructure.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetBindingTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> this <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance was bound to. If the object has not been 
            bound, this method throws an exception. Use <see cref="P:Remotion.Data.DomainObjects.DomainObject.HasBindingTransaction" /> to check whether the object has been boung to a 
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction" /> or not.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.PerformConstructorCheck"><summary>
            Ensures that <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances are not created via constructor checks.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.BaseGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Serializes the base data needed to deserialize a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> coming from the .NET serialization infrastructure.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> coming from the .NET serialization infrastructure.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.Initialize(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> during a call to <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1" /> or <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)" />. This method
            is automatically called by the framework and should not normally be invoked by user code.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to associate the new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with.</param><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> to associate the new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetType"><summary>
            GetType might return a <see cref="T:System.Type" /> object for a generated class, which is usually not what is expected.
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType" /> can be used to get the Type object of the original underlying domain object type. If
            the <see cref="T:System.Type" /> object for the generated class is explicitly required, this object can be cast to 'object' before calling GetType.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType"><summary>
            Returns the public type representation of this domain object, i.e. the type object visible to mappings, database, etc.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectTypeImplementation"><summary>
            Implements the functionality required by <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType" />. This is a separate method to avoid having to make the 
            virtual call in the constructor. The implementation of this class must expect calls from the constructor of a base class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.ToString"><summary>
            Returns a textual representation of this object's <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.MarkAsChanged"><summary>
            Marks the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> as changed in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />. If the object's previous <see cref="P:Remotion.Data.DomainObjects.DomainObject.State" /> was <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged" />, it
            will be <see cref="F:Remotion.Data.DomainObjects.StateType.Changed" /> after this method has been called.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.Delete"><summary>
            Deletes the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded"><summary>
            Calls the <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)" /> method with the right <see cref="T:Remotion.Data.DomainObjects.LoadMode" /> parameter.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)"><summary>
            This method is invoked after the loading process of the object is completed.
            </summary><param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been
            newly loaded.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnCommitting(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Committing" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnCommitted(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Committed" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnRollingBack(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RollingBack" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnRolledBack(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RolledBack" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanging(Remotion.Data.DomainObjects.RelationChangingEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanging" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.RelationChangingEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanged(Remotion.Data.DomainObjects.RelationChangedEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanged" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.RelationChangedEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnPropertyChanging(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanging" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnPropertyChanged(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanged" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnDeleting(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Deleting" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnDeleted(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Deleted" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanging"><summary>
            Occurs before a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanged"><summary>
            Occurs after a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.RelationChanging"><summary>
            Occurs before a Relation of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.RelationChanged"><summary>
            Occurs after a Relation of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.Deleting"><summary>
            Occurs before the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is deleted.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.Deleted"><summary>
            Occurs after the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been deleted.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.Committing"><summary>
            Occurs before the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> are committed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.Committed"><summary>
            Occurs after the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> are successfully committed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.RollingBack"><summary>
            Occurs before the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> are rolled back.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.RolledBack"><summary>
            Occurs after the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> are successfully rolled back.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.ID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.HasBindingTransaction"><summary>
            Gets a value indicating whether this instance is bound to specific transaction. If it is, it will always use that transaction, otherwise,
            it will always use <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> when it is accessed.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.State"><summary>
            Gets the current state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.IsDiscarded"><summary>
            Gets a value indicating the discarded status of the object in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.Timestamp"><summary>
            Gets the timestamp used for optimistic locking when the object is committed to the database in the default transaction, ie. in 
            its binding transaction or - if none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.CanBeUsedInTransaction"><summary>
            Determines whether this instance can be used in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.CurrentProperty"><summary>
            Provides simple, encapsulated access to the current property.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.Properties"><summary>
            Provides simple, encapsulated access to the properties of this <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectCollection"><summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Create(System.Type)"><summary>
            Creates an empty <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> of a given <see cref="T:System.Type" />.
            </summary><param name="collectionType">The <see cref="T:System.Type" /> of the new collection that should be instantiated. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Create(System.Type,System.Type)"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> of a given <see cref="T:System.Type" /> and sets the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType" />.
            </summary><param name="collectionType">The <see cref="T:System.Type" /> of the new collection that should be instantiated. Must not be <see langword="null" />.</param><param name="requiredItemType">The permitted <see cref="T:System.Type" /> of an item in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. If specified only this type or derived types can be added to the <b>DomainObjectCollection</b>.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Create(System.Type,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> of a given <see cref="T:System.Type" /> and adds the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s of the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerCollection" />.
            </summary><param name="collectionType">The <see cref="T:System.Type" /> of the new collection that should be instantiated. Must not be <see langword="null" />.</param><param name="contents">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are added to the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Create(System.Type,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject},System.Type)"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> of a given <see cref="T:System.Type" /> and adds the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s of the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerCollection" />.
            </summary><param name="collectionType">The <see cref="T:System.Type" /> of the new collection that should be instantiated. Must not be <see langword="null" />.</param><param name="contents">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s of that are added to the collection. Must not be <see langword="null" />.</param><param name="requiredItemType">The permitted <see cref="T:System.Type" /> of an item in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. If specified only this type or derived types can be added to the <b>DomainObjectCollection</b>.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Compare(Remotion.Data.DomainObjects.DomainObjectCollection,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Compares two instances of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> for equality.
            </summary><param name="collection1">The first <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.</param><param name="collection2">The second <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Compare(Remotion.Data.DomainObjects.DomainObjectCollection,Remotion.Data.DomainObjects.DomainObjectCollection,System.Boolean)"><summary>
            Compares two instances of <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> for equality.
            </summary><param name="collection1">The first <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.</param><param name="collection2">The second <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.</param><param name="ignoreItemOrder">Indicates whether the compare should ignore the order of the items in the collections for the compare operation.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor"><summary>
            Initializes a new <b>DomainObjectCollection</b>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(System.Type)"><summary>
            Initializes a new <b>DomainObjectCollection</b> that only takes a certain <see cref="T:System.Type" /> as members.
            </summary><param name="requiredItemType">The <see cref="T:System.Type" /> that are required for members.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(Remotion.Data.DomainObjects.DomainObjectCollection,System.Boolean)"><summary>
            Initializes a new <b>DomainObjectCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject},System.Boolean)"><summary>
            Initializes a new <b>DomainObjectCollection</b> as a shallow copy of a given enumeration of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary><param name="domainObjects">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(Remotion.Data.DomainObjects.DataManagement.DataContainerCollection,System.Boolean)"><summary>
            Initializes a new <b>DomainObjectCollection</b> as a shallow copy of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerCollection" />s.
            </summary><param name="dataContainers">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerCollection" /> to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(System.Collections.IEnumerable,System.Boolean)"><summary>
            Initializes a new <b>DomainObjectCollection</b> as a shallow copy of a given enumeration of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary><param name="domainObjects">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Combine(Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Adds all items of the given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to the <b>DomainObjectCollection</b>, that are not already part of it.
            </summary><param name="domainObjects">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to add items from. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.GetItemsNotInCollection(Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Returns all items of a given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> that are not part of the <b>DomainObjectCollection</b>.
            </summary><param name="domainObjects">The collection to evaluate. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Contains(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> contains a reference to the specified <paramref name="domainObject" />.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.ContainsObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> contains a reference to the specified <paramref name="domainObject" />.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Contains(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Add(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to the collection.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.AddRange(System.Collections.IEnumerable)"><summary>
            Adds a range of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances to this collection, calling <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Add(Remotion.Data.DomainObjects.DomainObject)" /> for each single item.
            </summary><param name="domainObjects">The domain objects to add.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.RemoveAt(System.Int32)"><summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> from the collection.
            </summary><param name="index">The index of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to remove.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Remove(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> from the collection.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to remove. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Remove(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> from the collection.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to remove. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clear"><summary>
            Removes all items from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.IndexOf(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Returns the zero-based index of a given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the collection.
            </summary><param name="domainObject">The <paramref name="domainObject" /> to locate in the collection.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.IndexOf(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Returns the zero-based index of a given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> in the collection.
            </summary><param name="id">The <paramref name="id" /> to locate in the collection.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Insert(System.Int32,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Inserts a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> into the collection at the specified index.
            </summary><param name="index">The zero-based <paramref name="index" /> at which the item should be inserted.</param><param name="domainObject">The <paramref name="domainObject" /> to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary><param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The 
            <see cref="T:System.Array" /> must have zero-based indexing.</param><param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#IList#Insert(System.Int32,System.Object)"><summary>
            Inserts an item to the IList at the specified position
            </summary><param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param><param name="value">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to insert into the <see cref="T:System.Collections.IList" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#IList#Remove(System.Object)"><summary>
            Removes a specific object from the <see cref="T:System.Collections.IList" />.
            </summary><param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#IList#Contains(System.Object)"><summary>
            Determines whether the <see cref="T:System.Collections.IList" /> contains a specific <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> or <see cref="T:Remotion.Data.DomainObjects.ObjectID" />.
            </summary><param name="value">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> or <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to locate in the <see cref="T:System.Collections.IList" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#IList#IndexOf(System.Object)"><summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
            </summary><param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#IList#Add(System.Object)"><summary>
            Adds an item to the <see cref="T:System.Collections.IList" />.
            </summary><param name="value">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to add to the <see cref="T:System.Collections.IList" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.System#ICloneable#Clone"><summary>
            Creates a shallow copy of this collection.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clone"><summary>
            Creates a shallow copy of this collection.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clone(System.Boolean)"><summary>
            Creates a shallow copy of this collection. Can be overridden in derived classes.
            </summary><param name="makeCloneReadOnly">Specifies whether the cloned collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Rollback(Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Performs a rollback of the collection by replacing the items in the collection with the items of a given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary><param name="originalDomainObjects">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> containing the original items of the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Commit(Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Performs a commit of the collection by replacing the items in the collection with the items of a given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary><param name="domainObjects">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> containing the new items for the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.ReplaceItems(Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Replaces the items in the collection with the items of a given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary><param name="domainObjects">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> containing the new items for the collection.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.PerformAdd(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to the collection without raising the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" /> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" /> events.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to add to the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.PerformInsert(System.Int32,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Inserts a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> at a given index to the collection without raising the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" /> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" /> events.
            </summary><param name="index">The zero-based <paramref name="index" /> at which the item should be inserted.</param><param name="domainObject">The <paramref name="domainObject" /> to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.PerformRemove(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> from the collection without raising the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" /> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> events.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to remove from the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.PerformDelete"><summary>
            Clears the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> without raising the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" /> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> events.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdding(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdded(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoving(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoved(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleting"><summary>
            The method is invoked immediately before the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> holding this collection is deleted if the <b>DomainObjectCollection</b> represents a one-to-many relation.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleted"><summary>
            The method is invoked after the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> holding this collection is deleted if the <b>DomainObjectCollection</b> represents a one-to-many relation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding"><summary>
            Occurs before an object is added to the collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added"><summary>
            Occurs after an object is added to the collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing"><summary>
            Occurs before an object is removed to the collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed"><summary>
            Occurs after an object is removed to the collection.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Count"><summary>
            Gets the number of elements contained in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.IsReadOnly"><summary>
            Gets a value indicating whether this collection is read-only.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType"><summary>
            Gets the required <see cref="T:System.Type" /> for all members of the collection.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Item(System.Int32)"><summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with a given <paramref name="index" /> in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Item(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with a given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.IsFixedSize"><summary>
            Gets a value indicating if the collection has a fixed size. Always returns false.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#IList#Item(System.Int32)"><summary>
            Gets or sets the element at the specified index. 
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventHandler"><summary>
            Represents the method that will handle the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" />, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" />, 
            <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" /> events of a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs"><summary>
            Provides data for the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" />, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" />, 
            <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" /> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> event of a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs.#ctor(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Initializes a new instance of the <b>DomainObjectCollectionChangingEventArgs</b> class.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is being added or removed to the collection. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs.DomainObject"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is being added or removed.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectGraphTraverser"><summary>
            Provides a mechanism for retrieving all the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances directly or indirectly referenced by a root object via
            <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject" /> and <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObjectCollection" /> properties. A
            <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy" /> can be given to decide which objects to include and which links to follow when traversing the
            object graph.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectGraphTraverser.GetFlattenedRelatedObjectGraph"><summary>
            Gets the flattened related object graph for the root <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> associated with this traverser.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectMixin`1"><summary>
            Base class for mixins adding persistent properties to domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectMixin`2"><summary>
            Base class for mixins adding persistent properties to domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IDomainObjectMixin"><summary>
            Allows a mixin applied to a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to react on events related to the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectMixin.OnDomainObjectCreated"><summary>
            Called when the mixin's target domain object has been created.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectMixin.OnDomainObjectLoaded(Remotion.Data.DomainObjects.LoadMode)"><summary>
            Called when the mixin's target domain object has been loaded.
            </summary><param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been
            newly loaded.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.GetPublicDomainObjectType"><summary>
            Gets the type returned by <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType" /> when called on this mixin's target object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.OnDomainObjectCreated"><summary>
            Called when the mixin's target domain object has been created.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.OnDomainObjectLoaded(Remotion.Data.DomainObjects.LoadMode)"><summary>
            Called when the mixin's target domain object has been loaded.
            </summary><param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been
            newly loaded.</param></member><member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.ID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of this mixin's target object.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.State"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.StateType" /> returned by this mixin's target object's <see cref="P:Remotion.Data.DomainObjects.DomainObject.State" /> property.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.IsDiscarded"><summary>
            Gets a value indicating whether this mixin's target object is discarded.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.Properties"><summary>
            Gets the properties of this mixin's target object, as returned by the <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties" /> property.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IDomainObjectBaseCallRequirements"><summary>
            Describes the minimum base call requirements that <see cref="T:Remotion.Data.DomainObjects.DomainObjectMixin`2" /> has to its target
            objects.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectBaseCallRequirements.Properties"><summary>
            Defines that the mixin's target object must have a property called Properties which returns an object of type <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />.
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> base class already defines this property.
            </summary></member><member name="T:Remotion.Data.DomainObjects.PropertyChangeEventHandler"><summary>
            Represents the method that will handle a <b>PropertyChanging</b> event.
            </summary></member><member name="T:Remotion.Data.DomainObjects.RelationChangingEventHandler"><summary>
            Represents the method that will handle a <b>RelationChanging</b> event.
            </summary></member><member name="T:Remotion.Data.DomainObjects.RelationChangedEventHandler"><summary>
            Represents the method that will handle a <b>RelationChanged</b> event.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionEventHandler"><summary>
            Represents the method that will handle <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> events.
            </summary></member><member name="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventHandler"><summary>
            Represents the method that will handle <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated" /> events.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ValueChangeEventArgs"><summary>
            Provides data for change events of <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ValueChangeEventArgs.#ctor(System.Object,System.Object)"><summary>
            Initializes a new instance of the <b>ValueChangingEventArgs</b>.
            </summary><param name="oldValue">The old value.</param><param name="newValue">The new value.</param></member><member name="P:Remotion.Data.DomainObjects.ValueChangeEventArgs.OldValue"><summary>
            Gets the old value.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ValueChangeEventArgs.NewValue"><summary>
            Gets the new value.
            </summary></member><member name="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs"><summary>
            Provides data for a <b>PropertyChanging</b> event.
            </summary></member><member name="M:Remotion.Data.DomainObjects.PropertyChangeEventArgs.#ctor(Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)"><summary>
            Initializes a new instance of the <b>ValueChangingEventArgs</b> class.
            </summary><param name="propertyValue">The <see cref="P:Remotion.Data.DomainObjects.PropertyChangeEventArgs.PropertyValue" /> that is being changed. Must not be <see langword="null" />.</param><param name="oldValue">The old value.</param><param name="newValue">The new value.</param></member><member name="P:Remotion.Data.DomainObjects.PropertyChangeEventArgs.PropertyValue"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object that is being changed.
            </summary></member><member name="T:Remotion.Data.DomainObjects.RelationChangingEventArgs"><summary>
            Provides data for a <b>RelationChanging</b> event.
            </summary></member><member name="M:Remotion.Data.DomainObjects.RelationChangingEventArgs.#ctor(System.String,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Initializes a new instance of the <b>RelationChangingEventArgs</b> class.
            </summary><param name="propertyName">The name of the property that is being changed due to the relation change. Must not be <see langword="null" />.</param><param name="oldRelatedObject">The old object that was related.</param><param name="newRelatedObject">The new object that is related.</param></member><member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.PropertyName"><summary>
            Gets the name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> that is being changed due to the relation change.
            </summary></member><member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.OldRelatedObject"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that was related.
            </summary></member><member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.NewRelatedObject"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is related.
            </summary></member><member name="T:Remotion.Data.DomainObjects.RelationChangedEventArgs"><summary>
            Provides data for a <b>RelationChanged</b> event.
            </summary></member><member name="M:Remotion.Data.DomainObjects.RelationChangedEventArgs.#ctor(System.String)"><summary>
            Initializes a new instance of the <b>RelationChangingEventArgs</b> class.
            </summary><param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> that is being changed due to the relation change. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.RelationChangedEventArgs.PropertyName"><summary>
            Gets the name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> that has been changed due to the relation change.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs"><summary>
            Provides data for <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> events.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionEventArgs.#ctor(Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Initializes a new instance of the <b>ClientTransactionEventArgs</b> class.
            </summary><param name="domainObjects">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s affected by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> operation. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionEventArgs.DomainObjects"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s affected by the <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit" /> operation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs"><summary>
            Provides data for the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated" /> event.
            </summary></member><member name="M:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs.#ctor(Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs" /> class.
            </summary><param name="subTransaction">The subtransaction created.</param></member><member name="P:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs.SubTransaction"><summary>
            Gets the subtransaction created.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy"><summary>
            Defines a strategy to use when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> graph using a <see cref="T:Remotion.Data.DomainObjects.DomainObjectGraphTraverser" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IGraphTraversalStrategy.ShouldProcessObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Determines whether to process the given object in the result set when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> graph.
            </summary><param name="domainObject">The domain object to decide about.</param></member><member name="M:Remotion.Data.DomainObjects.IGraphTraversalStrategy.ShouldFollowLink(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject,System.Int32,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor)"><summary>
            Determines whether to follow a relation link when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> graph.
            </summary><param name="root">The root domain object from which the traversal was started.</param><param name="currentObject">The current domain object defining the relation link.</param><param name="currentDepth">The number of links that were traversed from the root to the current object. Note that this value is not
            necessarily the shortest path from the root to the current object; if an object can be reached in more than one way, it is not defined
            which way is taken by the traverser.</param><param name="linkProperty">The link property. Note that when the property's <see cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValue``1" /> methods are
            accessed, this can cause the related objects to be loaded from the database.</param></member><member name="T:Remotion.Data.DomainObjects.InstantiableAttribute"><summary>
            When the <see cref="T:Remotion.Data.DomainObjects.InstantiableAttribute" /> is defined on a type, it signals that this type can be instantiated by the
            <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> infrastructure even though it declared as <see langword="abstract" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.InstantiableAttribute.#ctor"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.InstantiableAttribute" /> class.
            </summary></member><member name="T:Remotion.Data.DomainObjects.InvalidEnumDefinitionException"><summary>
            The exception that is thrown when an enum definition is invalid.
            </summary></member><member name="M:Remotion.Data.DomainObjects.InvalidEnumDefinitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Sets the SerializationInfo object with the parameter name and additional exception information.
            </summary><param name="info">The object that holds the serialized object data.</param><param name="context">The contextual information about the source or destination.</param></member><member name="P:Remotion.Data.DomainObjects.InvalidEnumDefinitionException.EnumType"><summary>
            The type of the enum that is invalid.
            </summary></member><member name="T:Remotion.Data.DomainObjects.InvalidEnumValueException"><summary>
            The exception that is thrown when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is set with an enum value that does not match the property's type.
            </summary></member><member name="T:Remotion.Data.DomainObjects.InvalidTypeException"><summary>
            The exception that is thrown when a PropertyValue is set to a value of wrong type.
            </summary></member><member name="M:Remotion.Data.DomainObjects.InvalidTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Sets the SerializationInfo object with the parameter name and additional exception information.
            </summary><param name="info">The object that holds the serialized object data.</param><param name="context">The contextual information about the source or destination.</param></member><member name="P:Remotion.Data.DomainObjects.InvalidTypeException.PropertyName"><summary>
            The name of the property that caused the exception.
            </summary></member><member name="P:Remotion.Data.DomainObjects.InvalidTypeException.ExpectedType"><summary>
            The type that was expected for the property value.
            </summary></member><member name="P:Remotion.Data.DomainObjects.InvalidTypeException.ActualType"><summary>
            The type that was provided for the property value.
            </summary></member><member name="T:Remotion.Data.DomainObjects.LoadMode"><summary>
            Indicates whether a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> was loaded as a whole or if only its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> was loaded.
            </summary></member><member name="F:Remotion.Data.DomainObjects.LoadMode.WholeDomainObjectInitialized"><summary>
            The whole object has been loaded, e.g. as a reaction to <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.LoadMode.DataContainerLoadedOnly"><summary>
            Only the object's <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been loaded, e.g. as a reaction to <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" /> or
            in a substransaction.
            </summary></member><member name="T:Remotion.Data.DomainObjects.MandatoryAttribute"><summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.MandatoryAttribute" /> to properties of type <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectID"><summary>
            Uniquely identifies a domain object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectID.op_Equality(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)"><summary>
            Tests whether two specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> objects are equivalent.
            </summary><param name="id1">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object that is to the left of the equality operator.</param><param name="id2">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object that is to the right of the equality operator.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.op_Inequality(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)"><summary>
            Tests whether two specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> objects are different.
            </summary><param name="id1">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object that is to the left of the inequality operator.</param><param name="id2">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object that is to the right of the inequality operator.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.Equals(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)"><summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> instances are considered equal.
            </summary><param name="id1">The first <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to compare.</param><param name="id2">The second <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to compare.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.Parse(System.String)"><summary>
            Converts the string representation of the ID to an <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> instance.
            </summary><param name="objectIDString">A string containing the object ID to convert.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(System.String,System.Object)"><summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified class ID and ID value.
            </summary><param name="classID">The ID of the class of the object. Must not be <see langword="null" />.</param><param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(System.Type,System.Object)"><summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified class type and ID value.
            </summary><param name="classType">The <see cref="T:System.Type" /> of the class of the object. Must not be <see langword="null" />.</param><param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.Object)"><summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> and ID value.
            </summary><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> of the object. Must not be <see langword="null" />.</param><param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.ToString"><summary>
            Returns the string representation of the current <see cref="T:Remotion.Data.DomainObjects.ObjectID" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectID.GetHashCode"><summary>
            Returns the hash code for this instance.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectID.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> is equal to the current <b>ObjectID</b>.
            </summary><param name="obj">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to compare with the current <b>ObjectID</b>. </param></member><member name="P:Remotion.Data.DomainObjects.ObjectID.StorageProviderID"><summary>
            Gets the ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> which stores the object.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ObjectID.Value"><summary>
            Gets the ID value used to identify the object in the storage provider.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ObjectID.ClassID"><summary>
            The class ID of the object class.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ObjectID.ClassDefinition"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> associated with this <b>ObjectID</b>.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ReflectionUtility"><summary>
            Utility class for methods using reflection.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetConfigFileDirectory"><summary>
            Returns the directory of the current executing assembly.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetAssemblyDirectory(System.Reflection.Assembly)"><summary>
            Gets the directory containing the given assembly.
            </summary><param name="assembly">The assembly whose directory to retrieve.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetAssemblyDirectory(System.Runtime.InteropServices._Assembly)"><summary>
            Gets the directory containing the given assembly.
            </summary><param name="assembly">The assembly whose directory to retrieve.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.CreateObject(System.Type,System.Object[])"><summary>
            Creates an object of a given type.
            </summary><param name="type">The <see cref="T:System.Type" /> of the object to instantiate. Must not be <see langword="null" />.</param><param name="constructorParameters">The parameters for the constructor of the object.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetPropertyName(System.Reflection.PropertyInfo)"><summary>
            Returns the reflection based property identifier for a given property member.
            </summary><param name="propertyInfo">The property whose identifier should be returned. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetPropertyName(System.Type,System.String)"><summary>Returns the property name scoped for a specific <paramref name="originalDeclaringType" />.</summary></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsObjectList(System.Type)"><summary>
            Evaluates whether the <paramref name="type" /> is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" /> or derived from <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />.
            </summary><param name="type">The <see cref="T:System.Type" /> to check. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetObjectListTypeParameter(System.Type)"><summary>
            Returns the type parameter of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />.
            </summary><param name="type">The <see cref="T:System.Type" /> for which to return the type parameter. Must not be <see langword="null" />.</param></member><member name="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"><summary>
            Represents a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that can be instantiated (via <see cref="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject" />), retrieved (via
            <see cref="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID)" />), and deleted via public methods.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject"><summary>
            Provides a base class for bindable <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> classes.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin" /> applies the <see cref="T:Remotion.ObjectBinding.IBusinessObjectWithIdentity" /> implementation for bindable types derived 
            from <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject" /> class in the process of deserialization.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> coming from the .NET serialization infrastructure.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> coming from the .NET serialization infrastructure.</param></member><member name="P:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject.DisplayName"><summary>
            Provides a possibility to override the display name of the bindable domain object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject"><summary>
            Returns a new instance of a concrete domain object for the current<see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The instance is constructed
            with the default constructor.
            </summary></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject(Remotion.Reflection.ParamList)"><summary>
            Returns a new instance of a concrete domain object for the current<see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The instance is constructed
            with a constructor accepting the given parameter list.
            </summary><param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList" /> object holding the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)" /> methods.</param></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> that is already loaded or attempts to load it from the datasource.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> that should be loaded. Must not be 
            <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> that is already loaded or attempts to load it from the datasource.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> that should be loaded. Must not be <see langword="null" />.</param><param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" />s that are already deleted.</param></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> class in the process of deserialization.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> coming from the .NET serialization infrastructure.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> coming from the .NET serialization infrastructure.</param></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.Delete"><summary>
            Deletes the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.StateType"><summary>
            Indicates the state of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.Unchanged"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has not changed since it was loaded.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.Changed"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been changed since it was loaded.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.New"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been instanciated and has not been committed.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.Deleted"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been deleted.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.Discarded"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> does not exist any longer.
            </summary></member><member name="T:Remotion.Data.DomainObjects.StorageClassNoneAttribute"><summary>Defines the property as not managed by the persistence framework.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.StorageClassAttribute"><summary>Defines if and how a property is managed by the persistence framework.</summary></member><member name="T:Remotion.Data.DomainObjects.StorageClassTransactionAttribute"><summary>Defines the property as managed in the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> but not-persisted in the underlying data store.</summary></member><member name="T:Remotion.Data.DomainObjects.StringPropertyAttribute"><summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.StringPropertyAttribute" /> to properties of type <see cref="T:System.String" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ValueTooLongException"><summary>
            The exception that is thrown when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is set with a value that is exceeds the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.MaxLength" /> of the property.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ValueTooLongException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Sets the SerializationInfo object with the parameter name and additional exception information.
            </summary><param name="info">The object that holds the serialized object data.</param><param name="context">The contextual information about the source or destination.</param></member><member name="P:Remotion.Data.DomainObjects.ValueTooLongException.PropertyName"><summary>
            Gets the PropertyName that was set with a value exceeding the maximum length.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ValueTooLongException.MaxLength"><summary>
            Gets the maximum length of the property.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Cloning.CompleteCloneStrategy"><summary>
            Assists <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner" /> by cloning all objects referenced by a cloned source object as well. This ensures deep cloning
            of a whole object graph.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy"><summary>
            Provides an interface for classes determining the details about how <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner" /> clones a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Cloning.ICloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)"><summary>
            Called when <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner" /> encounters a reference that might need to be cloned.
            </summary><param name="sourceReference">The reference on the source object.</param><param name="cloneReference">The reference on the cloned object.</param><param name="context">A <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext" /> that should be used to obtain clones of objects held by <paramref name="sourceReference" />.</param></member><member name="M:Remotion.Data.DomainObjects.Cloning.CompleteCloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)"><summary>
            Sets the <paramref name="cloneReference" /> to hold clones of the objects referenced by <paramref name="sourceReference" />.
            </summary><param name="sourceReference">The reference on the source object.</param><param name="cloneReference">The reference on the cloned object.</param><param name="context">The <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext" /> that is used to obtain clones of objects held by <paramref name="sourceReference" />.</param></member><member name="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner"><summary>
            Assists in cloning <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateValueClone``1(``0)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance of the same type and with the same property values as the given <paramref name="source" />.
            Relations are not cloned, foreign key properties default to null.
            </summary><param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be cloned.</param></member><member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateCloneHull``1(``0)"><summary>
            Creates a clone hull, which is a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of the same type as a given source object, but with no properties or
            relations being set.
            </summary><param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be cloned.</param></member><member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateClone``1(``0,Remotion.Data.DomainObjects.Cloning.ICloneStrategy)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance of the same type and with the same property values as the given <paramref name="source" />.
            Referenced objects are cloned according to the given strategy.
            </summary><param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be cloned.</param><param name="strategy">The <see cref="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy" /> to be used when cloning the object's references.</param></member><member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateClone``1(``0,Remotion.Data.DomainObjects.Cloning.ICloneStrategy,Remotion.Data.DomainObjects.Cloning.CloneContext)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance of the same type and with the same property values as the given <paramref name="source" />.
            Referenced objects are cloned according to the given strategy, the given context is used instead of creating a new one.
            </summary><param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be cloned.</param><param name="strategy">The <see cref="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy" /> to be used when cloning the object's references.</param><param name="context">The <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext" /> to be used by the cloner.</param></member><member name="P:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CloneTransaction"><summary>
            Gets or sets the transaction to be used for the clone. If this is set to <see langword="null" />, the current transaction is used.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Configuration.DomainObjectsConfiguration"><summary>
            <see cref="T:System.Configuration.ConfigurationSectionGroup" /> for grouping the <see cref="T:System.Configuration.ConfigurationSection" /> in the <b>Remotion.Data.DomainObjects</b> namespace.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration" /> interface is an abstraction for the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> and the fake 
            implementation of the domain objects configuration.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflector"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflector" /> is used to build a <see cref="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedClassDefinition" /> and the <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition" /> 
            objects for a type.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IgnoreForMappingConfigurationAttribute"><summary>
            Apply this attribute to a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> class to have the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.MappingReflector" /> ignore the class when building the
            mapping configuration.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.MemberReflectorBase"><summary>Base class for reflecting on the properties and relations of a class.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinder"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinder" /> is used to find all <see cref="T:System.Reflection.PropertyInfo" /> objects that constitute a <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinderBase"><summary>The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinderBase" /> is used to find all <see cref="T:System.Reflection.PropertyInfo" /> objects relevant for the mapping.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyReflector"><summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> from a <see cref="T:System.Reflection.PropertyInfo" />.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RdbmsClassReflector"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RdbmsClassReflector" /> is used introduce <b>RDBMS</b> specific information into the building the 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedClassDefinition" /> and the <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition" /> objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RdbmsRelationEndPointReflector"><summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition" /> from a <see cref="T:System.Reflection.PropertyInfo" /> for types persisted in an <b>RDBMS</b>.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationEndPointReflector"><summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition" /> from a <see cref="T:System.Reflection.PropertyInfo" />.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase"><summary>Base class for reflecting on the relations of a class.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationPropertyFinder"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationPropertyFinder" /> is used to find all <see cref="T:System.Reflection.PropertyInfo" /> objects that constitute a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflector"><summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition" /> from a <see cref="T:System.Reflection.PropertyInfo" />.</summary></member><member name="T:Remotion.Data.DomainObjects.Design.DomainObjectsDesignModeHelper"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Design.DomainObjectsDesignModeHelper" /> is inteded to encapsulate design mode specific initialization code for <see cref="T:System.ComponentModel.IComponent" />
            implementations in the <see cref="N:Remotion.Data.DomainObjects" /> namespace, such as data sources.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Development.FakeDomainObjectsConfiguration"><summary>
            Fake implementation of the <see cref="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration" /> interface. Use this class for programmatically setting up the configuration 
            in unit test scenarios.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.Interception.IInterceptedDomainObject"><summary>
            Marker interface indicating that a domain object type was generated by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.TypeGenerator" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException"><summary>
            This exception is thrown when the property interception mechanism cannot be applied to a specific <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> type
            because of problems with that type's declaration.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException.#ctor(System.String,System.Type)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException" /> class.
            </summary><param name="message">The exception message.</param><param name="type">The type that cannot be intercepted.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException.Type"><summary>
            The type that cannot be intercepted.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.RootClientTransaction"><summary>
            Represents a top-level <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, which does not have a parent transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.RootClientTransaction.CreateBindingTransaction"><summary>
            Do not use this method, use <see>ClientTransaction.CreateBindingTransaction</see> instead.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.RootClientTransaction.#ctor"><summary>
            Initializes a new instance of the <b>RootClientTransaction</b> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.RootClientTransaction.CreateEmptyTransactionOfSameType"><summary>Initializes a new instance of this transaction.</summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction.CreateRootTransaction"><summary>
            Do not use this method, use <see>ClientTransaction.CreateRootTransaction</see> instead.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException"><summary>
            Thrown when a client transaction's state is tried to be modified and the ClientTransaction's internal state is set to read-only,
            usually because there is an active nested transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException" /> class, specifying an exception message.
            </summary><param name="message">The exception message.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper" /> provides a wrapper for ClientTransactions that implements the <see cref="T:Remotion.Data.ITransaction" /> interface.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.To``1"><summary> Gets the native transaction.</summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Commit"><summary> Commits the transaction. </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Rollback"><summary> Rolls the transaction back. </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.CreateChild"><summary> Creates a new child transaction for the current transaction. </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Release"><summary> Allows the transaction to implement clean up logic. </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.EnterScope"><summary>
            Enters a new scope for the given transaction, making it the active transaction while the scope exists.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.RegisterObjects(System.Collections.IEnumerable)"><summary>Registers the <paramref name="objects" /> with the transaction.</summary><param name="objects">The objects to be registered. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.CanCreateChild"><summary> 
              Gets a flag that describes whether the transaction supports creating child transactions by invoking
              <see cref="M:Remotion.Data.ITransaction.CreateChild" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Parent"><summary> Gets the transaction's parent transaction. </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.IsChild"><summary>Gets a flag describing whether the transaction is a child transaction.</summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.HasUncommittedChanges"><summary>Gets a flag describing whether the transaction has been changed since the last commit or rollback.</summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.IsReadOnly"><summary>Gets a flag describing whether the transaction is in a read-only state.</summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.CompoundClientTransactionListener"><summary>
            Implements a collection of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" /> objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"><summary>
            Defines an interface for objects listening for events occuring in the scope of a ClientTransaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.NewObjectCreating(System.Type,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Indicates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance is being created. This event is called while the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> base 
            constructor is executing before the subclass constructors have run and before the object has got its <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> or 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />. If this method throws an exception, the object construction will be canceled and no side effects will remain.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager"><summary>
            Manages a stack of property names per thread.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.GetAndCheckCurrentPropertyName"><summary>
            Retrieves the current property name and throws an exception if there is no property name on this thread's property name stack.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PreparePropertyAccess(System.String)"><summary>
            Prepares access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> of the given name by pushing its name on top of the current thread's stack of property 
            names.
            </summary><param name="propertyName">The name of the property to be accessed.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PropertyAccessFinished"><summary>
            Indicates that access to the property of the given name is finished by removing it from the current thread's stack of property names.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.CurrentPropertyName"><summary>
            Returns the property name last put on this thread's stack, or null if the stack is empty.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility"><summary>
            Contains commonly used get and check methods dealing with <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.GetNonNullClientTransaction(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Returns the binding transaction of the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" />, or the 
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> if the object has not been bound. If there are neither binding nor current transaction,
            an exception is thrown.
            </summary><param name="domainObject">The domain object to get a transaction for.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.CheckIfObjectIsDiscarded(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Checks if an object is discarded, and, if yes, throws an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectDiscardedException" />.
            </summary><param name="domainObject">The domain object to check.</param><param name="transaction">The transaction to check the object against.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.CheckIfRightTransaction(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Checks if the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> can be used in the given transaction, and, if not, throws a <see cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException" />.
            </summary><param name="domainObject">The domain object to check.</param><param name="transaction">The transaction to check the object against.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectMixinCodeGenerationBridge"><summary>
            Forms a bridge between domain objects and mixins by supporting generation and deserialization of mixed domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContext"><summary>
            Provides the default implementation of the <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" /> interface.
            Represents the context of a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContext.DomainObject" /> that is associated with a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContextIndexer"><summary>
            Provides an indexing property to access a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s transaction-dependent context for a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ExtensionClientTransactionListener"><summary>
            A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" /> implementation that notifies <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension">IClientTransactionExtensions</see>
            about transaction events.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator"><summary>
            Provides a common interface for classes creating new instances of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> types.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator.CreateWithDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance and initializes is from the given existing data container.
            </summary><param name="dataContainer">The data container to initialize the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator.GetConstructorLookupInfo(System.Type)"><summary>
            Gets a <see cref="T:Remotion.Reflection.ConstructorLookupInfo" /> that can be used to construct a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of the given 
            <paramref name="domainObjectType" />.
            </summary><param name="domainObjectType">Type of the domain object.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectCreator"><summary>
            Creates new domain object instances via the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory"><summary>
            Provides functionality for creating instances of DomainObjects which intercept property calls.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.#ctor"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory" /> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory" /> class.
            </summary><param name="assemblyDirectory">The directory to save the generated assemblies to. This directory is only used when
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.SaveGeneratedAssemblies" /> is used.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.SaveGeneratedAssemblies"><summary>
            Saves the assemblies generated by the factory and returns the paths of the saved manifest modules.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.GetConcreteDomainObjectType(System.Type)"><summary>
            Gets a domain object type assignable to the given base type which intercepts property calls.
            </summary><param name="baseType">The base domain object type whose properties should be intercepted.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.GetConcreteDomainObjectType(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.Type)"><summary>
            Gets a domain object type assignable to the given base type which intercepts property calls.
            </summary><param name="baseTypeClassDefinition">The base domain object type whose properties should be intercepted.</param><param name="concreteBaseType">The base domain object type whose properties should be intercepted.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.WasCreatedByFactory(System.Type)"><summary>
            Checkes whether a given domain object type was created by this factory implementation (but not necessarily the same factory instance).
            </summary><param name="type">The type to be checked.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.PrepareUnconstructedInstance(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Prepares an instance which has not been created via an ordinary constructor callfor use.
            </summary><param name="instance">The instance to be prepared</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.Scope"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.ModuleManager" /> scope used by this factory.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.LoggingClientTransactionListener"><summary>
            A listener implementation logging all transaction events.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"><summary>
            Provides an encapsulation of a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject">DomainObject's</see> property for simple access as well as static methods
            supporting working with properties.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.#ctor(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Initializes the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor" /> object.
            </summary><param name="domainObject">The domain object whose property is to be encapsulated.</param><param name="propertyData">a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" /> object describing the property to be accessed.</param><param name="clientTransaction">The transaction to be used for accessing the property.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValue``1"><summary>
            Gets the property's value.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValueWithoutTypeCheck"><summary>
            Gets the property's value without performing a type check.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetRelatedObjectID"><summary>
            Gets the ID of the related object for related object properties.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalValue``1"><summary>
            Gets the property's value from that moment when the property's domain object was enlisted in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalValueWithoutTypeCheck"><summary>
            Gets the property's original value without performing a type check.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalRelatedObjectID"><summary>
            Gets the original ID of the related object for related object properties.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.SetValue``1(``0)"><summary>
            Sets the property's value.
            </summary><param name="value">The value to be set. For simple value properties,
            this is the value to be set. For related objects, this is the related object. For related object collections,
            this is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />, where "T" is the related objects' type.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.SetValueWithoutTypeCheck(System.Object)"><summary>
            Sets the property's value without performing an exact type check on the given value. The value must still be asssignable to
            <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType" />, though.
            </summary><param name="value">The value to be set. For simple value properties,
            this is the value to be set. For related objects, this is the related object. For related object collections,
            this is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />, where "T" is the related objects' type.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ToString"><summary>
            Returns the full property name of the property represented by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"><summary>
            Gets the domain object of this property.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.PropertyData"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" /> object describing the property to be accessed.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"><summary>
            Gets the client transaction used to access this property.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasChanged"><summary>
            Indicates whether the property's value has been changed in its current transaction.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasBeenTouched"><summary>
            Indicates whether  the property's value (for simple and related object properties) or one of its elements (for related object collection
            properties) has been assigned since instantiation, loading, commit or rollback, regardless of whether the current value differs from the
            original value.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.IsNull"><summary>
            Gets a value indicating whether the property's value is <see langword="null" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyKind(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyKind" /> for a given property identifier and class definition.
            </summary><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> object describing the property's declaring class.</param><param name="propertyIdentifier">The property identifier.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyType(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Returns the value type of the given property.
            </summary><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> object describing the property's declaring class.</param><param name="propertyIdentifier">The property identifier.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyDefinitionObjects(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Returns mapping objects for the given property.
            </summary><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> object describing the property's declaring class.</param><param name="propertyIdentifier">The property identifier.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.IsValidProperty(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Checks whether the given property identifier denotes an existing property on the given <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" />.
            </summary><param name="classDefinition">The class definition to be checked.</param><param name="propertyID">The property to be looked for.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" /> by comparing
            <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyIdentifier" /> and <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.ClassDefinition" />.
            </summary><param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" />.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.ClassDefinition"><summary>
            The definition object for the property's declaring class.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.Kind"><summary>
            Indicates which kind of property is encapsulated by this structure.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyIdentifier"><summary>
            The identifier for the property encapsulated by this structure.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"><summary>
            The property value type. For simple value properties, this is the simple property type. For related objects, this
            is the related object's type. For related object collections, this is <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />, where "T" is the
            related objects' type.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyDefinition"><summary>
            The encapsulated object's property definition object (can be <see langword="null" />).
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.RelationEndPointDefinition"><summary>
            The encapsulated object's relation end point definition object (can be <see langword="null" />).
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"><summary>
            Provides an indexer to access a specific property of a domain object. Instances of this value type are returned by
            <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.#ctor(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" /> instance. This is usually not called from the outside; instead, <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />
            instances are returned by <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties" />.
            </summary><param name="domainObject">The domain object whose properties should be accessed with this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.GetPropertyCount"><summary>
            Gets the number of properties defined by the domain object. This corresponds to the number of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor" /> objects
            indexable by this structure and enumerated by <see cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable"><summary>
            Returns an implementation of <see cref="T:System.Collections.Generic.IEnumerable`1" /> that enumerates over all the properties indexed by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />
            in the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" />'s transaction. That is either the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> transaction or the object's
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction" /> (if any).
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable(Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Returns an implementation of <see cref="T:System.Collections.Generic.IEnumerable`1" /> that enumerates over all the properties indexed by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />
            in the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary><param name="transaction">The transaction to be used to enumerate the properties.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Contains(System.String)"><summary>
            Determines whether the domain object contains a property with the specified identifier.
            </summary><param name="propertyIdentifier">The long property identifier to check for.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Contains(System.Type,System.String)"><summary>
            Determines whether the domain object contains a property with the specified short name and declaring type.
            </summary><param name="domainObjectType">The type declaring the property with the given <paramref name="shortPropertyName" />.</param><param name="shortPropertyName">The short property name to check for.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find(System.Type,System.String)"><summary>
            Finds a property with the specified short name, starting its search at a given declaring type upwards the inheritance hierarchy.
            </summary><param name="typeToStartSearch">The type to start searching from.</param><param name="shortPropertyName">The short name of the property to find.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find``1(``0,System.String)"><summary>
            Finds a property with the specified short name, starting its search at the type of the given <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" /> argument.
            </summary><param name="thisDomainObject">The domain object parameter used for inference of type <typeparamref name="TDomainObject" />.</param><param name="shortPropertyName">The short name of the property to find.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find(System.String)"><summary>
            Finds a property with the specified short name, starting its search at the type of the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" /> whose properties
            are represented by this indexer.
            </summary><param name="shortPropertyName">The short name of the property to find.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.GetAllRelatedObjects"><summary>
            Gets all related objects of the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" /> associated with this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.String)"><summary>
            Selects the property of the domain object with the given name.
            </summary><param name="propertyName">The name of the property to be accessed.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.Type,System.String)"><summary>
            Selects the property of the domain object with the given short name and declaring type.
            </summary><param name="shortPropertyName">The short name of the property to be accessed.</param><param name="domainObjectType">The type declaring the property.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.String,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Selects the property of the domain object with the given name.
            </summary><param name="propertyName">The name of the property to be accessed.</param><param name="transaction">The transaction to use for accessing the property.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.Type,System.String,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Selects the property of the domain object with the given short name and declaring type.
            </summary><param name="shortPropertyName">The short name of the property to be accessed.</param><param name="domainObjectType">The type declaring the property.</param><param name="transaction">The transaction to use for accessing the property.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyKind"><summary>
            Indicates the kind of a <see cref="T:Remotion.Data.DomainObjects.DomainObject">DomainObject's</see> property.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.PropertyValue"><summary>
            The property is a simple value.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject"><summary>
            The property is a single related domain object.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObjectCollection"><summary>
            The property is a collection of related domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ReadOnlyClientTransactionListener"><summary>
            An implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" /> which throws an exception if the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is about
            to be modified while in a read-only state.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.RepositoryAccessor"><summary>
            Provides functionality for infrastructure code to instantiate, get, and delete <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances
            without going through the usual methods defined by <see cref="T:Remotion.Data.DomainObjects.DomainObject" />. It also supports creating objects given
            a <see cref="T:System.Type" /> object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.RepositoryAccessor.NewObject(System.Type,Remotion.Reflection.ParamList)"><summary>
            Returns a new instance of a concrete domain object. The object is created with the supplied constructor arguments in the 
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary><param name="domainObjectType">The <see cref="T:System.Type" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be created.</param><param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList" /> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)" /> methods.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.RepositoryAccessor.GetObject(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is already loaded or attempts to load it from the datasource.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param><param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are already deleted.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.RepositoryAccessor.DeleteObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Deletes the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the default transaction, ie. the object's binding transaction or 
            - if none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary><param name="objectToBeDeleted">The object to be deleted.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.SubClientTransaction"><summary>
            Represents a transaction that is part of a bigger parent transaction. Any changes made within this subtransaction are not visible in
            the parent transaction until the subtransaction is committed, and a commit operation will only commit the changes to the parent transaction, 
            not to any storage providers.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.SubClientTransaction.CreateBindingTransaction"><summary>
            Do not use this method, use <see>ClientTransaction.CreateBindingTransaction</see> instead.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.SubClientTransaction.CreateEmptyTransactionOfSameType"><summary>Initializes a new instance of this transaction.</summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.TransactionUnlocker"><summary>
            Temporarily makes a read-only transaction writeable.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Linq.ContainsObjectParser"><summary>
            Parses expressions of the form <code>where o.OrderItems.ContainsObject (myOrderItem)</code>.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Linq.DatabaseInfo"><summary>
            The implementation of <see cref="T:Remotion.Data.Linq.IDatabaseInfo" />  for getting detailed information from re-store which is the underlying data source.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1"><summary>
            The implementation of <see cref="T:System.Linq.IQueryable`1" /> for querying <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1.#ctor(Remotion.Data.DomainObjects.Linq.QueryProvider,System.Linq.Expressions.Expression)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> class.
            </summary><param name="provider">The provider to be used for querying.</param><param name="expression">The expression encapsulated by this <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> instance.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1.#ctor(Remotion.Data.Linq.SqlGeneration.ISqlGenerator)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> class.
            </summary><param name="sqlGenerator">The <see cref="T:Remotion.Data.Linq.SqlGeneration.ISqlGenerator" /> to be used when this query is translated into SQL.</param></member><member name="T:Remotion.Data.DomainObjects.Linq.QueryExecutor`1"><summary>
            Extends <see cref="T:Remotion.Data.DomainObjects.Linq.QueryExecutorBase" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Linq.QueryExecutorBase"><summary>
            The class uses re-store to execute queries.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutorBase.#ctor(Remotion.Data.Linq.SqlGeneration.ISqlGenerator)"><summary>
            Initializes a new instance of this <see cref="T:Remotion.Data.DomainObjects.Linq.QueryExecutorBase" /> class.
            </summary><param name="sqlGenerator">The sql generator <see cref="T:Remotion.Data.Linq.SqlGeneration.ISqlGenerator" /> which is used for querying re-store.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutorBase.ExecuteSingle(Remotion.Data.Linq.QueryModel,System.Collections.Generic.IEnumerable{Remotion.Data.Linq.EagerFetching.FetchRequestBase})"><summary>
            Creates and executes a given <see cref="T:Remotion.Data.Linq.QueryModel" />.
            </summary><param name="queryModel">The generated <see cref="T:Remotion.Data.Linq.QueryModel" /> of the linq query.</param><param name="fetchRequests">The <see cref="T:Remotion.Data.Linq.EagerFetching.FetchRequestBase" /> instances to be executed together with the query.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutorBase.ExecuteCollection(Remotion.Data.Linq.QueryModel,System.Collections.Generic.IEnumerable{Remotion.Data.Linq.EagerFetching.FetchRequestBase})"><summary>
            Creates and executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" />.
            </summary><param name="queryModel">The generated <see cref="T:Remotion.Data.Linq.QueryModel" /> of the linq query.</param><param name="fetchRequests">The <see cref="T:Remotion.Data.Linq.EagerFetching.FetchRequestBase" /> instances to be executed together with the query.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutorBase.CheckProjection(Remotion.Data.Linq.DataObjectModel.IEvaluation)"><summary>
            Check to avoid choosing a column in the select projection. This is needed because re-store does not support single columns.
            </summary><param name="evaluation"></param></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutorBase.CreateQuery(System.String,Remotion.Data.Linq.QueryModel,System.Collections.Generic.IEnumerable{Remotion.Data.Linq.EagerFetching.FetchRequestBase})"><summary>
            Creates a a <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> object based on the given <see cref="T:Remotion.Data.Linq.QueryModel" />.
            </summary><param name="id">The identifier for the linq query.</param><param name="queryModel">The <see cref="T:Remotion.Data.Linq.QueryModel" /> for the given query.</param><param name="fetchRequests">The <see cref="T:Remotion.Data.Linq.EagerFetching.FetchRequestBase" /> instances to be executed together with the query.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutorBase.CreateQuery(System.String,Remotion.Data.Linq.QueryModel,System.Collections.Generic.IEnumerable{Remotion.Data.Linq.EagerFetching.FetchRequestBase},Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Creates a a <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> object based on the given <see cref="T:Remotion.Data.Linq.QueryModel" />.
            </summary><param name="id">The identifier for the linq query.</param><param name="queryModel">The <see cref="T:Remotion.Data.Linq.QueryModel" /> for the given query.</param><param name="fetchRequests">The <see cref="T:Remotion.Data.Linq.EagerFetching.FetchRequestBase" /> instances to be executed together with the query.</param><param name="classDefinitionOfResult">The class definition of the result objects to be returned by the query. This is used to obtain the
            storage provider to execute the query and to resolve the relation properties of the <paramref name="fetchRequests" />.</param><param name="sortExpression">A SQL expression that is used in an ORDER BY clause to sort the query results.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutorBase.CreateQuery(System.String,System.String,System.String,Remotion.Data.Linq.SqlGeneration.CommandParameter[])"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> object.
            </summary><param name="id">The identifier for the linq query.</param><param name="storageProviderID">The ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> to be used for the query.</param><param name="statement">The sql statement of the query.</param><param name="commandParameters">The parameters of the sql statement.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutorBase.CreateStatement(Remotion.Data.Linq.QueryModel)"><summary>
            Uses the given <see cref="T:Remotion.Data.Linq.SqlGeneration.ISqlGenerator" /> to generate sql code for the linq query.
            </summary><param name="queryModel">The generated <see cref="T:Remotion.Data.Linq.QueryModel" /> of the linq query.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryExecutor`1.GetClassDefinition"><summary>
            Gets ClassDefinition of current mapping configuration.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Linq.QueryProvider"><summary>
            The class extends <see cref="T:Remotion.Data.Linq.QueryProviderBase" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Linq.QueryProvider.CreateQueryable``1(System.Linq.Expressions.Expression)"><summary>
            The method returns a specific instance of <see cref="T:System.Linq.IQueryable" />.
            </summary><param name="expression">The query as expression chain.</param></member><member name="T:Remotion.Data.DomainObjects.Mapping.AnonymousRelationEndPointDefinition"><summary>
            Represents the non-existing side of a unidirectional relationship.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Mapping.IMappingNameResolver.GetPropertyName(System.Reflection.PropertyInfo)"><summary>
            Returns the mapping name for the given <paramref name="property" />.
            </summary><param name="property">The property whose mapping name should be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.Mapping.IMappingNameResolver.GetPropertyName(System.Type,System.String)"><summary>
            Returns the mapping name for a property with the given <paramref name="shortPropertyName" /> on the <paramref name="originalDeclaringType" />.
            </summary><param name="originalDeclaringType">The type on which the property was first declared.</param><param name="shortPropertyName">The short property name of the property.</param></member><member name="M:Remotion.Data.DomainObjects.Mapping.IMappingNameResolver.GetProperty(System.Type,System.String)"><summary>
            Returns the property identified by the given mapping property name on the given type.
            </summary><param name="concreteType">The type on which to search for the property. This can be the same type whose name is encoded in 
            <paramref name="propertyName" /> or a derived type or generic specialization.</param><param name="propertyName">The long mapping property name of the property to be retrieved.</param></member><member name="P:Remotion.Data.DomainObjects.Mapping.MappingConfiguration.ResolveTypes"><summary>
            Gets a flag whether type names in the configuration file should be resolved to their corresponding .NET <see cref="T:System.Type" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedClassDefinition"><summary><see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> used when loading the mapping from the reflection meta data.</summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedNameResolver"><summary>
            Resolves <see cref="T:System.Reflection.PropertyInfo" /> objects into property names and the other way around.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Mapping.ReflectionBasedNameResolver.GetPropertyName(System.Reflection.PropertyInfo)"><summary>
            Returns the mapping name for the given <paramref name="property" />.
            </summary><param name="property">The property whose mapping name should be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.Mapping.ReflectionBasedNameResolver.GetPropertyName(System.Type,System.String)"><summary>
            Returns the mapping name for a property with the given <paramref name="shortPropertyName" /> on the <paramref name="originalDeclaringType" />.
            </summary><param name="originalDeclaringType">The type on which the property was first declared.</param><param name="shortPropertyName">The short property name of the property.</param></member><member name="M:Remotion.Data.DomainObjects.Mapping.ReflectionBasedNameResolver.GetProperty(System.Type,System.String)"><summary>
            Returns the property identified by the given mapping property name on the given type.
            </summary><param name="concreteType">The type on which to search for the property. This can be the same type whose name is encoded in 
            <paramref name="propertyName" /> or a derived type or generic specialization.</param><param name="propertyName">The long mapping property name of the property to be retrieved.</param></member><member name="T:Remotion.Data.DomainObjects.Mapping.VirtualRelationEndPointDefinition"><summary>
            Represents the non-foreign-key side of a unidirectional relationship.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition"><summary>
            Represents the non-anonymous, foreign-key side of a bidirectional or unidirectional relationship.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.RelationKindType"><summary>
            Defines the kind of a given <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.OneToOne"><summary>
            There is a one-to-one relationship between referenced objects.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.OneToMany"><summary>
            There is a one-to-many (or many-to-one) relationship between referenced objects.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.Unidirectional"><summary>
            There is a one-to-many relationship between referenced objects, but only the "many" side has a reference to its one related object; there
            is no back-reference to the many objects from the "one" side.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.StorageClass"><summary>The storage class options available in the persistence framework.</summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.Persistent"><summary>The property is persistet into the data store.</summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.Transaction"><summary>The property is managed by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, but not persistet.</summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.None"><summary>The property is ignored by the persistence framework.</summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ArgumentCheckingCollectionDataDecorator"><summary>
            Implements a decorator for <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> that performs semantic checks on the arguments passed to 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ArgumentCheckingCollectionDataDecorator.Insert(System.Int32,Remotion.Data.DomainObjects.DomainObject)" /> or <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ArgumentCheckingCollectionDataDecorator.Replace(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.DomainObject)" />. Use this to avoid <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ArgumentCheckingCollectionDataDecorator.Insert(System.Int32,Remotion.Data.DomainObjects.DomainObject)" /> or <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ArgumentCheckingCollectionDataDecorator.Replace(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.DomainObject)" /> being called on the wrapped
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> instance if the operation cannot be executed because of the arguments.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData"><summary>
            Provides an interface for an encapsulation of the data stored inside a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.DomainObjectCollectionData"><summary>
            Provides an an encapsulation of the data stored inside a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />, implementing the 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> interface. The data is stored by means of two collections, an ordered <see cref="T:System.Collections.Generic.List`1" /> of 
            <see cref="T:Remotion.Data.DomainObjects.ObjectID" />s and a <see cref="T:System.Collections.Generic.Dictionary`2" /> mapping the IDs to <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.EventRaisingCollectionDataDecorator"><summary>
            Extends <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.DomainObjectCollectionData" /> by events being raised whenever the collection is modified. The events are raised via
            an <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionEventRaiser" /> instance.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ReadOnlyCollectionDataDecorator"><summary>
            This class acts as a read-only adapter for another <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" /> object. Every modifying method of the
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> interface will throw an <see cref="T:System.InvalidOperationException" /> when invoked on this class.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.TypeCheckingCollectionDataDecorator"><summary>
            This class acts as a type-checking adapter for another <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" /> object. Every inserting method of the
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> interface will check the type of the new item for a given required item <see cref="T:System.Type" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.UnsafeDomainObjectCollectionData"><summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />, storing <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> data. This class does not do any semantic checks
            when its operations are executed. This means that it is possible to get it into inconsistent state. Always combine it with a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ArgumentCheckingCollectionDataDecorator" /> (or use <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.DomainObjectCollectionData" /> instead).
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.BidirectionalRelationModificationBase"><summary>
            Represents all modification steps needed to change a bidirectional relation.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.RelationEndPointModification.CreateBidirectionalModification"><summary>
            Creates all modification steps needed to perform a bidirectional operation. One of the steps is this modification, the other 
            steps are the opposite modifications on the new/old related objects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.CollectionEndPointInsertModification.CreateBidirectionalModification"><summary>
            Creates all modifications needed to perform a bidirectional insert operation into this collection end point.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.CollectionEndPointRemoveModification.CreateBidirectionalModification"><summary>
            Creates all modifications needed to perform a bidirectional remove operation from this collection end point.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.CollectionEndPointReplaceModification.CreateBidirectionalModification"><summary>
            Creates all modifications needed to perform a bidirectional replace operation within this collection end point.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.CollectionEndPointSelfReplaceModification.CreateBidirectionalModification"><summary>
            Creates all modifications needed to perform a bidirectional self-replace operation within this collection end point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.NonNotifyingBidirectionalRelationModification"><summary>
            Represents a bidirectional relation modification that only calls <see cref="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.RelationEndPointModification.Perform" /> on its 
            steps. Specifically, it does not notify the client transaction when its steps are executed, and it does not
            call <see cref="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.RelationEndPointModification.Begin" /> or <see cref="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.RelationEndPointModification.End" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.NotifyingBidirectionalRelationModification"><summary>
            Represents a bidirectional relation modification that notifies the client transaction when its steps are executed, and which
            calls <see cref="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.RelationEndPointModification.Begin" /> and calls <see cref="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.RelationEndPointModification.End" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.ObjectEndPointSetOneManyModification.CreateBidirectionalModification"><summary>
            Creates all modification steps needed to perform a bidirectional 1:n set operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. One of the steps is 
            this modification, the other steps are the opposite modifications on the new/old related objects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.ObjectEndPointSetOneOneModification.CreateBidirectionalModification"><summary>
            Creates all modification steps needed to perform a bidirectional 1:1 set operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. One of the steps is 
            this modification, the other steps are the opposite modifications on the new/old related objects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.EndPointModifications.ObjectEndPointSetSameModification.CreateBidirectionalModification"><summary>
            Creates all modification steps needed to perform a bidirectional set-same operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. One of the steps is 
            this modification, the other steps are the opposite modifications on the new/old related objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"><summary>
            Represents a container for the persisted properties of a DomainObject.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateNew(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Creates an empty <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" />. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />
            contains a new <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object for every <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> in the respective <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClassDefinition" />.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> to create. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateForExisting(Remotion.Data.DomainObjects.ObjectID,System.Object,System.Func{Remotion.Data.DomainObjects.Mapping.PropertyDefinition,System.Object})"><summary>
            Creates an empty <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for an existing <see cref="T:Remotion.Data.DomainObjects.DomainObject" />. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />
            contain all <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> objects, just as if it had been created with <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateNew(Remotion.Data.DomainObjects.ObjectID)" />, but the values for persistent 
            properties are set as returned by a lookup method.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> to create. Must not be <see langword="null" />.</param><param name="timestamp">The timestamp value of the existing object in the datasource.</param><param name="persistentValueLookup">A function object returning the value of a given persistent property for the existing object.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateAndCopyState(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.DataManagement.DataContainer)"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for the given <paramref name="id" />, assuming the same state as another <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />. Must not be <see langword="null" />.</param><param name="stateSource">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> whose state to copy to the new container. Must not be <see langword="null" /> and must
            match the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClassDefinition" /> of <paramref name="id" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.GetValue(System.String)"><summary>
            Gets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> specified by <paramref name="propertyName" />.
            </summary><param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.SetValue(System.String,System.Object)"><summary>
            Sets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> specified by <paramref name="propertyName" />.
            </summary><param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />. Must not be <see langword="null" />.</param><param name="value">The value the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is set to.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.MarkAsChanged"><summary>
            Marks an existing <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> as changed. <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State" /> will return <see cref="F:Remotion.Data.DomainObjects.StateType.Changed" /> after this method
            has been called.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.OnPropertyChanging(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DataManagement.DataContainer.PropertyChanging" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.OnPropertyChanged(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DataManagement.DataContainer.PropertyChanged" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.Clone"><summary>
            Creates a copy of this data container and its state.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DataManagement.DataContainer.PropertyChanging"><summary>
            Occurs before a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DataManagement.DataContainer.PropertyChanged"><summary>
            Occurs after a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is changed.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.Item(System.String)"><summary>
            Gets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> specified by <paramref name="propertyName" />.
            </summary><param name="propertyName">The name of the property. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> which the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> is part of.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> associated with the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClassDefinition"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObjectType"><summary>
            Gets the <see cref="T:System.Type" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.PropertyValues"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> of all <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />s that are part of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State"><summary>
            Gets the state of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.Timestamp"><summary>
            Gets the timestamp of the last committed change of the data in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.IsDiscarded"><summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.NullCollectionEndPoint"><summary>
            Represents a collection end point (with a specific <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition" />) for a <see langword="null" /> object.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.NullObjectEndPoint"><summary>
            Represents an object end point (with a specific <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition" />) for a <see langword="null" /> object.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.ObjectDiscardedException"><summary>
            The exception that is thrown when properties or methods of a discarded object are accessed.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.ObjectDiscardedException.ID"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object that caused the exception.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"><summary>
            Represents a property of a domain object that is persisted by the framework.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.#ctor(Remotion.Data.DomainObjects.Mapping.PropertyDefinition)"><summary>
            Initializes a new <b>PropertyValue</b> with a given <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" />.
            </summary><param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> to use for initializing the <b>PropertyValue</b>. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.#ctor(Remotion.Data.DomainObjects.Mapping.PropertyDefinition,System.Object)"><summary>
            Initializes a new <b>PropertyValue</b> with a given <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> and an initial <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" />.
            </summary><param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> to use for initializing the <b>PropertyValue</b>. Must not be <see langword="null" />.</param><param name="value">The initial <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> for the <b>PropertyValue</b>.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is equal to the current <b>PropertyValue</b>.
            </summary><param name="obj">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> to compare with the current <b>PropertyValue</b>. </param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.GetHashCode"><summary>
            Returns the hash code for this instance.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Definition"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Name"><summary>
            Gets the name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.PropertyType"><summary>
            Gets the <see cref="T:System.Type" /> of the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"><summary>
            Gets or sets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.OriginalValue"><summary>
            Gets the original <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> at the point of instantiation, loading, commit or rollback.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.IsNullable"><summary>
            Indicates whether the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> may contain <see langword="null" /> as a value.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.MaxLength"><summary>
            Gets the maximum length of the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.HasChanged"><summary>
            Indicates if the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> has changed since instantiation, loading, commit or rollback.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.HasBeenTouched"><summary>
            Indicates if the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> has been assigned since instantiation, loading, commit or rollback,
            regardless of whether the current value differs from the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.OriginalValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.IsDiscarded"><summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"><summary>
            A typed collection for <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> objects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.#ctor"><summary>
            Initializes a new <b>PropertyValueCollection</b> object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.#ctor(Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection,System.Boolean)"><summary>
            Initializes a new <b>PropertyValueCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Contains(Remotion.Data.DomainObjects.DataManagement.PropertyValue)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> contains a specific <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary><param name="propertyValue">The object to locate in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Contains(System.String)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> contains a specific property name.
            </summary><param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Add(Remotion.Data.DomainObjects.DataManagement.PropertyValue)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> to the collection.
            </summary><param name="value">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the items of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> to an array, starting at a particular array index.
            </summary><param name="array">The one-dimensional array that is the destination of the items copied from <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />. The array must have zero-based indexing. Must not be <see langword="null" />.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.GetEnumerator"><summary>
            Returns an enumerator that can iterate through the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.OnPropertyChanging(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanging" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.OnPropertyChanged(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanged" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanging"><summary>
            Occurs before the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> is changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanged"><summary>
            Occurs after the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> is changed.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> with a given <paramref name="index" /> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Item(System.String)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> with a given <paramref name="propertyName" /> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary><param name="propertyName">The name of the property. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Count"><summary>
            Gets the number of items contained in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsReadOnly"><summary>
            Gets a value indicating whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> is read-only.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsSynchronized"><summary>
            Gets a value indicating whether access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> is synchronized (thread-safe).
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsDiscarded"><summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.ValueAccess"><summary>
            An value indicating whether the original or current value of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is being accessed.
            </summary></member><member name="F:Remotion.Data.DomainObjects.DataManagement.ValueAccess.Original"><summary>
            The original value is being accessed.
            </summary></member><member name="F:Remotion.Data.DomainObjects.DataManagement.ValueAccess.Current"><summary>
            The current value is being accessed.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMetadataFactory"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMetadataFactory" /> implements the <see cref="T:Remotion.ObjectBinding.BindableObject.IMetadataFactory" /> interface for domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectPropertyReflector"><summary>
            Use the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectPropertyReflector" /> to create <see cref="T:Remotion.ObjectBinding.IBusinessObjectProperty" /> implementations for the 
            bindable domain object extension of the business object interfaces.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectProvider"><summary>
            The implementation of  <see cref="T:Remotion.ObjectBinding.IBusinessObjectProvider" /> to be used with the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectProviderAttribute"><summary>
            Apply this attribute to your BindableDomainObject-type to classify the this type as using the DomainObject-specific implementation of object binding.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectServiceFactoryMixin"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectServiceFactoryMixin" /> is an extension of the <see cref="T:Remotion.ObjectBinding.BindableObject.BindableObjectServiceFactory" /> used by
            the <see cref="T:Remotion.ObjectBinding.BindableObject.BindableObjectProvider" /> and provides default service instances for bindable domain object implementations.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.CommandBuilder.AddCommandParameter(System.Data.IDbCommand,System.String,System.Object)"></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider.CreateValueConverter"><summary> Gets a value converter that converts database types to .NET types according to the providers type mapping rules. </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider.DelimitIdentifier(System.String)"><summary> Surrounds an identifier with delimiters according to the database's syntax. </summary></member><member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider.StatementDelimiter"><summary> A delimiter to end a SQL statement if the database requires one, an empty string otherwise. </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException"><summary>
            Thrown when the process of loading multiple objects at the same time fails.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Persistence.BulkLoadException._exceptions"><summary>
            The exceptions that occurred while the objects were loaded.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.BulkLoadException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException" /> class.
            </summary><param name="exceptions">The exceptions thrown while the objects were loaded.</param></member><member name="P:Remotion.Data.DomainObjects.Persistence.BulkLoadException.Exceptions"><summary>
            The exceptions that occurred while the objects were loaded.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration"><summary>
            Represents the current query configuration.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfigurationException"><summary>
            The exception that is thrown when a problem occurs while constructing a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"><summary>
            Represents the definition of a query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.String,System.String,System.String,Remotion.Data.DomainObjects.Queries.Configuration.QueryType)"><summary>
            Initializes a new instance of the <b>QueryDefinition</b> class.
            </summary><param name="queryID">The <paramref name="queryID" /> to be associated with this <b>QueryDefinition</b>. Must not be <see langword="null" />.</param><param name="storageProviderID">The ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> responsible for executing instances of this <b>QueryDefinition</b>. Must not be <see langword="null" />.</param><param name="statement">The <paramref name="statement" /> of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> specified through <paramref name="storageProviderID" /> must understand the syntax of the <paramref name="statement" />. Must not be <see langword="null" />.</param><param name="queryType">One of the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> enumeration constants.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.String,System.String,System.String,Remotion.Data.DomainObjects.Queries.Configuration.QueryType,System.Type)"><summary>
            Initializes a new instance of the <b>QueryDefinition</b> class.
            </summary><param name="queryID">The <paramref name="queryID" /> to be associated with this <b>QueryDefinition</b>. Must not be <see langword="null" />.</param><param name="storageProviderID">The ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> responsible for executing instances of this <b>QueryDefinition</b>. Must not be <see langword="null" />.</param><param name="statement">The <paramref name="statement" /> of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> specified through <paramref name="storageProviderID" /> must understand the syntax of the <paramref name="statement" />. Must not be <see langword="null" />.</param><param name="queryType">One of the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> enumeration constants.</param><param name="collectionType">If <paramref name="queryType" /> specifies a collection to be returned, <paramref name="collectionType" /> specifies the type of the collection. If <paramref name="queryType" /> is <see langword="null" />, <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> is used.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            This constructor is used for deserializing the object and is not intended to be used directly from code.
            </summary><param name="info">The data needed to serialize or deserialize an object. </param><param name="context">The source and destination of a given serialized stream.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the 
            data needed to serialize the current <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> instance. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> for further details.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param><param name="context">The contextual information about the source or destination of the serialization.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the 
            data needed to serialize the current <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> instance. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> for further details.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param><param name="context">The contextual information about the source or destination of the serialization.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.System#Runtime#Serialization#IObjectReference#GetRealObject(System.Runtime.Serialization.StreamingContext)"><summary>
            Returns a reference to the real object that should be deserialized. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> for further details.
            </summary><param name="context">The source and destination of a given serialized stream.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID"><summary>
            Gets the unique ID for this <b>QueryDefinition</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderID"><summary>
            Gets the ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> responsible for executing instances of this <b>QueryDefinition</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.Statement"><summary>
            Gets the <paramref name="statement" /> of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> specified through <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderID" /> must understand the syntax of the <b>Statement</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> of this <b>QueryDefinition</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.CollectionType"><summary>
            If <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> specifies a collection to be returned, <b>CollectionType</b> specifies the type of the collection. The default is <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. 
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"><summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />s.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.#ctor"><summary>
            Initializes a new instance of the <b>QueryDefinitionCollection</b> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.#ctor(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection,System.Boolean)"><summary>
            Initializes a new <b>QueryDefinitionCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" /> to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.GetMandatory(System.String)"><summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> identified through <paramref name="queryID" />. If no <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> can be found an exception is thrown.
            </summary><param name="queryID">The <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID" /> of the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to be found.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Contains(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary><param name="queryDefinition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Contains(System.String)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary><param name="queryID">The <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID" /> of the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Add(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to the collection.
            </summary><param name="queryDefinition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to add. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Item(System.Int32)"><summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> with a given <paramref name="index" /> in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Item(System.String)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> with a given <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID" /> from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"><summary>
            Indicates the type of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Collection"><summary>
            Instances of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> return a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Scalar"><summary>
            Instances of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> return only a single value.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.EagerFetcher"><summary>
            Used by the <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager" /> implementations in order to perform eager fetching of collection queries.
            See <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.EagerFetchQueries" /> for more information on eager fetching.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.EagerFetchQueryCollection"><summary>
            Holds the eager fetch queries for a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> instance. See <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.EagerFetchQueries" /> for more information about
            eager fetch queries.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.IQuery"><summary>
            Represents an executable query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.ID"><summary>
            Gets a unique identifier for the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.Statement"><summary>
            Gets the statement of the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderID"><summary>
            Gets the unique ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> responsible for executing the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.CollectionType"><summary>
            Gets the type of the collection if the query returns a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.QueryType"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType" /> of the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.Parameters"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />s that are used to execute the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.EagerFetchQueries"><summary>
            Gets the eager fetch queries associated with this <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> instance.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.IQueryManager"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager" /> provides an interface for methods to execute queries within a <see cref="P:Remotion.Data.DomainObjects.Queries.IQueryManager.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetScalar(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns the scalar value.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection``1(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.IQueryManager.ClientTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> that is associated with the <see cref="T:Remotion.Data.DomainObjects.Queries.RootQueryManager" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.IQueryResult"><summary>
            Represents an untyped result of a collection query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ContainsDuplicates"><summary>
            Determines whether the result set contains duplicates.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ContainsNulls"><summary>
            Determines whether result set contains <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.AsEnumerable"><summary>
            Returns the query result set as an enumerable object. Might contain duplicates or <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToArray"><summary>
            Returns the query result set as an array. Might contain duplicates or <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToObjectList"><summary>
            Returns the query result set as an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />. If the result set contains duplicates or <see langword="null" /> values, this
            method throws an exception.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToCustomCollection"><summary>
            Returns the query result set as the custom collection specified by the query <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />. If the result set contains
            duplicates or <see langword="null" /> values, this method throws an exception. If no custom collection was specified, a standard 
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> is returned.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQueryResult.Count"><summary>
            Gets the number of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances returned by the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQueryResult.Query"><summary>
            Gets the query used to construct this result.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Query"><summary>
            Represents a default implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.Query.#ctor(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.Query" /> class using a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> and a given collection of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />s.
            </summary><param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to use for the query.</param><param name="parameters">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />s to use for executing the query.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.Definition"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> that is associated with the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.ID"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.CollectionType"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.CollectionType" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.QueryType"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.Statement"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.Statement" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.StorageProviderID"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderID" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.Parameters"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />s that are used to execute the <see cref="T:Remotion.Data.DomainObjects.Queries.Query" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryCache"><summary>
            Provides a thread-safe way to cache LINQ queries by a unique identifier.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryCache.GetQuery``1(System.String,System.Func{Remotion.Data.DomainObjects.Linq.DomainObjectQueryable{``0},System.Linq.IQueryable})"><summary>
            Gets a query for the given LINQ query, returning it from the cache if possible.
            </summary><param name="id">The ID to associate with the LINQ queryable. This ID is used as the cache key of the parsed query.</param><param name="queryGenerator">A delegate returning the LINQ queryable. The argument of this delegate is a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" />
            to start the LINQ query with.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryCache.ExecuteCollectionQuery``1(Remotion.Data.DomainObjects.ClientTransaction,System.String,System.Func{Remotion.Data.DomainObjects.Linq.DomainObjectQueryable{``0},System.Linq.IQueryable})"><summary>
            Gets a query for the given LINQ query and executes it in the given <paramref name="transaction" />. The query is taken from the cache if 
            possible.
            </summary><param name="transaction">The transaction whose <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager" /> is used to execute the query.</param><param name="id">The ID to associate with the LINQ queryable. This ID is used as the cache key of the parsed query.</param><param name="queryGenerator">A delegate returning the LINQ queryable. The argument of this delegate is a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" />
            to start the LINQ query with.</param></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryFactory"><summary>
            Provides a central entry point to get instances of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> query objects. Use this 
            factory to create LINQ queries or to read queries from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1(Remotion.Data.Linq.SqlGeneration.ISqlGenerator)"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> used as the entry point to a LINQ query.
            </summary><param name="sqlGenerator">The <see cref="T:Remotion.Data.Linq.SqlGeneration.ISqlGenerator" /> object to be used for generating the query command string.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> used as the entry point to a LINQ query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.GetDefaultSqlGenerator(System.Type)"><summary>
            Returns the default <see cref="T:Remotion.Data.Linq.SqlGeneration.ISqlGenerator" /> associated with the given <paramref name="domainObjectType" />.
            </summary><param name="domainObjectType">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> type whose <see cref="T:Remotion.Data.Linq.SqlGeneration.ISqlGenerator" /> should be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)"><summary>
            Creates a new query object from a given <paramref name="queryDefinition" />.
            </summary><param name="queryDefinition">The query definition to construct a query from.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)"><summary>
            Creates a new query object from a given <paramref name="queryDefinition" />.
            </summary><param name="queryDefinition">The query definition to construct a query from.</param><param name="queryParameterCollection">The parameter collection to use for the query.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(System.String,System.Linq.IQueryable)"><summary>
            Creates a new query object from a given LINQ query.
            </summary><param name="id">The ID to assign to the query.</param><param name="queryable">The queryable constituting the LINQ query. This must be obtained by forming a LINQ query starting with an instance of 
            <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" />. Use <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1" /> to create such a query source.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)"><summary>
            Creates a new query object, loading its data from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration" />.
            </summary><param name="id">The id of the query to load.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)"><summary>
            Creates a new query object, loading its data from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration" />.
            </summary><param name="id">The id of the query to load.</param><param name="queryParameterCollection">The parameter collection to use for the query.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateScalarQuery(System.String,System.String,System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)"><summary>
            Creates a new scalar query with the given statement, parameters, and metadata.
            Note that creating queries with a hard-coded SQL statement is not very flexible and not portable at all.
            Therefore, the <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1" /> and <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)" />
            methods should usually be preferred to this method.
            </summary><param name="id">A string identifying the query.</param><param name="storageProviderID">The ID of the storage provider used to execute the query.</param><param name="statement">The scalar query statement.</param><param name="queryParameterCollection">The parameter collection to be used for the query.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateCollectionQuery(System.String,System.String,System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection,System.Type)"><summary>
            Creates a new collection query with the given statement, parameters, and metadata.
            Note that creating queries with a hard-coded SQL statement is not very flexible and not portable at all.
            Therefore, the <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1" /> and <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)" />
            methods should usually be preferred to this method.
            </summary><param name="id">A string identifying the query.</param><param name="storageProviderID">The ID of the storage provider used to execute the query.</param><param name="statement">The scalar query statement.</param><param name="queryParameterCollection">The parameter collection to be used for the query.</param><param name="collectionType">The collection type to be returned from the query. Pass <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> if you don't care
            about the collection type. The type passed here is used by <see cref="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToCustomCollection" />.</param></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryParameter"><summary>
            Represents a parameter that is used in a query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameter.#ctor(System.String,System.Object)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> class with a <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType" /> of <see cref="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Value" />.
            </summary><param name="name">The name of the parameter.</param><param name="value">The value of the parameter.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameter.#ctor(System.String,System.Object,Remotion.Data.DomainObjects.Queries.QueryParameterType)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> class.
            </summary><param name="name">The name of the parameter. Must not be <see langword="null" />.</param><param name="value">The value of the parameter.</param><param name="parameterType">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType" /> of the parameter.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name"><summary>
            Gets the name of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value"><summary>
            Gets or sets the value of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType"><summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType" /> of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"><summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> objects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.#ctor"><summary>
            Initializes a new <b>QueryParameterCollection</b>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.#ctor(Remotion.Data.DomainObjects.Queries.QueryParameterCollection,System.Boolean)"><summary>
            Initializes a new <b>QueryParameterCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" /> to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(System.String,System.Object)"><summary>
            Adds a new <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to the collection with <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType" /> of Value.
            </summary><param name="parameterName">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name" /> of the new parameter. Must not be <see langword="null" />.</param><param name="parameterValue">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value" /> of the new parameter.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(System.String,System.Object,Remotion.Data.DomainObjects.Queries.QueryParameterType)"><summary>
            Adds a new <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to the collection.
            </summary><param name="parameterName">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name" /> of the new parameter. Must not be <see langword="null" />.</param><param name="parameterValue">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value" /> of the new parameter.</param><param name="parameterType">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType" /> of the new parameter.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Contains(Remotion.Data.DomainObjects.Queries.QueryParameter)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary><param name="queryParameter">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to locate in the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Contains(System.String)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary><param name="name">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name" /> of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to locate in the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(Remotion.Data.DomainObjects.Queries.QueryParameter)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to the collection.
            </summary><param name="parameter">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to add.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> with a given <paramref name="index" /> in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Item(System.String)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> with a given <paramref name="name" /> in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryParameterType"><summary>
            Indicates the type of a <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Value"><summary>
            Instances of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> will be treated as parameters in the query.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Text"><summary>
            Instances of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> will replaced inline into the query.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"><summary>
            Represents a typed result of a collection query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.#ctor(Remotion.Data.DomainObjects.Queries.IQuery,`0[])"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1" /> class.
            </summary><param name="query">The query that yielded the <paramref name="queryResult" /></param><param name="queryResult">The elements making up the query result. The <see cref="T:System.Collections.Generic.IEnumerable`1" /> is enumerated exactly once by this class.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ContainsDuplicates"><summary>
            Determines whether the result set contains duplicates.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ContainsNulls"><summary>
            Determines whether result set contains <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.AsEnumerable"><summary>
            Returns the query result set as an enumerable object. Might contain duplicates or <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToArray"><summary>
            Returns the query result set as an array. Might contain duplicates or <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToObjectList"><summary>
            Returns the query result set as an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />. If the result set contains duplicates or <see langword="null" /> values, this
            method throws an exception.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToCustomCollection"><summary>
            Returns the query result set as the custom collection as specified by <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.CollectionType" />. If the result set contains
            duplicates or <see langword="null" /> values, this method throws an exception. If no custom collection was specified, a standard
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> is returned.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Count"><summary>
            Gets the number of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances returned by the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Query"><summary>
            Gets the query used to construct this result.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.RootQueryManager"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Queries.RootQueryManager" /> provides methods to execute queries within a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.RootClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.RootQueryManager.#ctor(Remotion.Data.DomainObjects.Infrastructure.RootClientTransaction)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.RootQueryManager" /> class. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.Infrastructure.RootClientTransaction" /> to be used in the <b>RootQueryManager</b>. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.RootQueryManager.GetScalar(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns the scalar value.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.RootQueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.RootQueryManager.GetCollection``1(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.RootQueryManager.ClientTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> that is associated with the <see cref="T:Remotion.Data.DomainObjects.Queries.RootQueryManager" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.SubQueryManager"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Queries.RootQueryManager" /> provides methods to execute queries within a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.SubClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.SubQueryManager.#ctor(Remotion.Data.DomainObjects.Infrastructure.SubClientTransaction)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.SubQueryManager" /> class.
            </summary><param name="clientTransaction">The client transaction to manage queries for.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.SubQueryManager.GetScalar(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns the scalar value.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.SubQueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.SubQueryManager.GetCollection``1(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.SubQueryManager.ClientTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> that is associated with the <see cref="T:Remotion.Data.DomainObjects.Queries.SubQueryManager" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.UnexpectedQueryResultException"><summary>
            Thrown when a query yields a result unexpected in the context of the parameters given by the user.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy"><summary>
            Represents an export strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using binary serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.IExportStrategy"><summary>
            Implements a strategy to export a set of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances to a byte array. The exported objects are
            wrapped as <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" /> property holders by the <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" /> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.IExportStrategy.Export(Remotion.Data.DomainObjects.Transport.TransportItem[])"><summary>
            Exports the specified transported objects.
            </summary><param name="transportedObjects">The objects to be exported.</param></member><member name="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy"><summary>
            Represents an import strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using binary serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.IImportStrategy"><summary>
            Implements a strategy to import a set of transported <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances from a byte array. The imported objects
            should be wrapped as <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" /> property holders, the <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectImporter" /> class creates 
            <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances from those holders and synchronizes them with the database.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.IImportStrategy.Import(System.Byte[])"><summary>
            Imports the specified data.
            </summary><param name="data">The data to be imported.</param></member><member name="T:Remotion.Data.DomainObjects.Transport.DomainObjectImporter"><summary>
            Assists in importing data exported by a <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" /> object. This class is used by
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.Byte[])" /> and is usually not instantiated by users.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"><summary>
            Collects domain objects to be transported to another system.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.Byte[])"><summary>
            Loads the data transported from another system into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects" /> container using the <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy" />.
            </summary><param name="data">The transported data to be loaded.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.Byte[],Remotion.Data.DomainObjects.Transport.IImportStrategy)"><summary>
            Loads the data transported from another system into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects" /> container.
            </summary><param name="data">The transported data to be loaded.</param><param name="strategy">The strategy to use when importing data. This must match the strategy being used with <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.GetBinaryTransportData(Remotion.Data.DomainObjects.Transport.IExportStrategy)" />.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.IsLoaded(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Determines whether the specified <paramref name="objectID" /> has been loaded for transportation.
            </summary><param name="objectID">The object ID to check.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadNew(System.Type,Remotion.Reflection.ParamList)"><summary>
            Loads a new instance of a domain object for transportation.
            </summary><param name="type">The domain object type to instantiate.</param><param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList" /> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)" /> methods.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> into the transporter.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object to load.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadWithRelatedObjects(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> plus all objects directly referenced by it into the transporter.
            Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)" />.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object which is to be loaded together with its related objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadRecursive(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> plus all objects directly or indirectly referenced by it into the
            transporter. Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)" />.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object which is to be loaded together with its related objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadRecursive(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.IGraphTraversalStrategy)"><summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> plus all objects directly or indirectly referenced by it into the
            transporter, as specified by the <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy" />. Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)" />.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object which is to be loaded together with its related objects.</param><param name="strategy">An <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy" /> instance defining which related object links to follow and which
            objects to include in the set of transported objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.GetTransportedObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Retrieves a loaded object so that it can be manipulated prior to it being transported.
            </summary><param name="loadedObjectID">The object ID of the object to be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.GetBinaryTransportData"><summary>
            Gets a the objects loaded into this transporter (including their contents) in a binary format for transport to another system using <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy" />.
            At the target system, the data can be loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.Byte[])" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.GetBinaryTransportData(Remotion.Data.DomainObjects.Transport.IExportStrategy)"><summary>
            Gets a the objects loaded into this transporter (including their contents) in a binary format for transport to another system.
            At the target system, the data can be loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.Byte[],Remotion.Data.DomainObjects.Transport.IImportStrategy)" />.
            </summary><param name="strategy">The strategy to be used for exporting data. This must match the strategy used with <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.Byte[],Remotion.Data.DomainObjects.Transport.IImportStrategy)" />.</param></member><member name="P:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.ObjectIDs"><summary>
            Gets the IDs of the objects loaded into this transporter.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.TransportationException"><summary>
            Indicates a problem when exporting or importing <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" />. Usually,
            the data or objects either don't match the <see cref="T:Remotion.Data.DomainObjects.Transport.IImportStrategy" /> or <see cref="T:Remotion.Data.DomainObjects.Transport.IExportStrategy" /> being used, or the data has become
            corrupted.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportationException.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportationException" /> class.
            </summary><param name="message">The exception message.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportationException.#ctor(System.String,System.Exception)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportationException" /> class.
            </summary><param name="message">The exception message.</param><param name="innerException">The inner exception.</param></member><member name="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects"><summary>
            Represents the data transported via a <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" /> object on the target system.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.#ctor(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.Generic.List{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects" /> class. This constructor is typically only used internally,
            use <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.Byte[])" /> to instantiate this class.
            </summary><param name="dataTransaction">The transaction containing the transported objects' data.</param><param name="transportedObjects">The transported objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport"><summary>
            Finishes the transport by committing the <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction" /> to the database.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport(System.Func{Remotion.Data.DomainObjects.DomainObject,System.Boolean})"><summary>
            Finishes the transport by committing the <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction" /> to the database, providing a filter to exclude some objects
            from being committed.
            </summary><param name="filter">A filter delegate called for each object that would be committed to the database. Return true to include the
            object in the commit, or false to leave its state in the database as is.</param></member><member name="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction"><summary>
            Gets the transaction holding the data of the transported objects. Use <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterNonDiscardingScope" /> to
            inspect the data in an application.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.TransportedObjects"><summary>
            Gets the transported objects. Use <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction" /> to inspect or change their data before calling <see cref="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.TransportItem"><summary>
            Represents a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance when it is to be transported by <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.PackageDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)"><summary>
            Packages the data held by a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" />. This method is only meant for internal purposes.
            </summary><param name="container">The container to package.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.PackageDataContainers(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DataManagement.DataContainer})"><summary>
            Packages the data held by a stream of <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> instances into a stream of <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" /> values. This method 
            is only meant for internal purposes.
            </summary><param name="containers">The containers to package.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.#ctor(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" /> class.
            </summary><param name="id">The id of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> represented by this item.</param></member><member name="P:Remotion.Data.DomainObjects.Transport.TransportItem.ID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> represented by this item.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Transport.TransportItem.Properties"><summary>
            Gets the properties to be transported by this item.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.XmlExportStrategy"><summary>
            Represents an export strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using XML serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.XmlImportStrategy" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.XmlImportStrategy"><summary>
            Represents an import strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using XML serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.XmlExportStrategy" />.
            </summary></member></members></doc>